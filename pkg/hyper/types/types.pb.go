/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	ContainerPort
	EnvironmentVar
	VolumeMount
	WaitingStatus
	RunningStatus
	TermStatus
	ContainerStatus
	ContainerInfo
	Container
	RBDVolumeSource
	PodVolume
	PodSpec
	PodStatus
	PodInfo
	ImageInfo
	PodStats
	CpuStats
	CpuUsage
	BlkioStats
	BlkioStatEntry
	MemoryStats
	MemoryStatsMemoryData
	NetworkStats
	TcpStat
	InterfaceStats
	FsStats
	ContainersStats
	PodInfoRequest
	PodInfoResponse
	PodListRequest
	PodListResult
	PodListResponse
	ContainerListRequest
	ContainerListResult
	ContainerListResponse
	ContainerInfoRequest
	ContainerInfoResponse
	VMListResult
	VMListRequest
	VMListResponse
	ImageListRequest
	ImageListResponse
	VMCreateRequest
	VMCreateResponse
	VMRemoveRequest
	VMRemoveResponse
	UserContainerPort
	UserVolumeReference
	UserFileReference
	UserUser
	Ulimit
	UserContainer
	UserResource
	UserFile
	UserVolumeOption
	UserVolume
	UserInterface
	UserServiceBackend
	UserService
	PodLogConfig
	PortMapping
	PortmappingWhiteList
	UserPod
	PodCreateRequest
	PodCreateResponse
	PodRemoveRequest
	PodRemoveResponse
	ContainerLogsRequest
	ContainerLogsResponse
	DriverStatus
	InfoRequest
	InfoResponse
	ExecCreateRequest
	ExecCreateResponse
	ExecStartRequest
	ExecStartResponse
	ExecVMRequest
	ExecVMResponse
	ExecSignalRequest
	ExecSignalResponse
	PodStartRequest
	PodStartResponse
	WaitRequest
	WaitResponse
	AttachMessage
	ContainerCreateRequest
	ContainerCreateResponse
	ContainerStartRequest
	ContainerStartResponse
	ContainerRenameRequest
	ContainerRenameResponse
	ContainerRemoveRequest
	ContainerRemoveResponse
	AuthConfig
	ImagePullRequest
	ImagePullResponse
	ImagePushRequest
	ImagePushResponse
	ImageRemoveRequest
	ImageDelete
	ImageRemoveResponse
	ContainerStopRequest
	ContainerStopResponse
	VersionRequest
	VersionResponse
	ServiceListResponse
	ServiceListRequest
	ServiceAddRequest
	ServiceAddResponse
	ServiceDelRequest
	ServiceDelResponse
	ServiceUpdateRequest
	ServiceUpdateResponse
	PodStopRequest
	PodStopResponse
	PodSignalRequest
	PodSignalResponse
	PodPauseRequest
	PodPauseResponse
	PodUnpauseRequest
	PodUnpauseResponse
	PodLabelsRequest
	PodLabelsResponse
	PodStatsRequest
	PodStatsResponse
	PingRequest
	PingResponse
	ContainerSignalRequest
	ContainerSignalResponse
	TTYResizeRequest
	TTYResizeResponse
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Types definitions for HyperContainer
type ContainerPort struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HostPort      int32  `protobuf:"varint,2,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	ContainerPort int32  `protobuf:"varint,3,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	Protocol      string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	HostIP        string `protobuf:"bytes,5,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
}

func (m *ContainerPort) Reset()                    { *m = ContainerPort{} }
func (m *ContainerPort) String() string            { return proto.CompactTextString(m) }
func (*ContainerPort) ProtoMessage()               {}
func (*ContainerPort) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

func (m *ContainerPort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerPort) GetHostPort() int32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *ContainerPort) GetContainerPort() int32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *ContainerPort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ContainerPort) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

type EnvironmentVar struct {
	Env   string `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EnvironmentVar) Reset()                    { *m = EnvironmentVar{} }
func (m *EnvironmentVar) String() string            { return proto.CompactTextString(m) }
func (*EnvironmentVar) ProtoMessage()               {}
func (*EnvironmentVar) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *EnvironmentVar) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *EnvironmentVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type VolumeMount struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	ReadOnly  bool   `protobuf:"varint,3,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (m *VolumeMount) String() string            { return proto.CompactTextString(m) }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *VolumeMount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeMount) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *VolumeMount) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type WaitingStatus struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *WaitingStatus) Reset()                    { *m = WaitingStatus{} }
func (m *WaitingStatus) String() string            { return proto.CompactTextString(m) }
func (*WaitingStatus) ProtoMessage()               {}
func (*WaitingStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *WaitingStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type RunningStatus struct {
	StartedAt string `protobuf:"bytes,1,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
}

func (m *RunningStatus) Reset()                    { *m = RunningStatus{} }
func (m *RunningStatus) String() string            { return proto.CompactTextString(m) }
func (*RunningStatus) ProtoMessage()               {}
func (*RunningStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{4} }

func (m *RunningStatus) GetStartedAt() string {
	if m != nil {
		return m.StartedAt
	}
	return ""
}

type TermStatus struct {
	ExitCode   int32  `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	StartedAt  string `protobuf:"bytes,4,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	FinishedAt string `protobuf:"bytes,5,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`
}

func (m *TermStatus) Reset()                    { *m = TermStatus{} }
func (m *TermStatus) String() string            { return proto.CompactTextString(m) }
func (*TermStatus) ProtoMessage()               {}
func (*TermStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{5} }

func (m *TermStatus) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *TermStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *TermStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TermStatus) GetStartedAt() string {
	if m != nil {
		return m.StartedAt
	}
	return ""
}

func (m *TermStatus) GetFinishedAt() string {
	if m != nil {
		return m.FinishedAt
	}
	return ""
}

type ContainerStatus struct {
	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerID string         `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Phase       string         `protobuf:"bytes,3,opt,name=phase,proto3" json:"phase,omitempty"`
	Waiting     *WaitingStatus `protobuf:"bytes,4,opt,name=waiting" json:"waiting,omitempty"`
	Running     *RunningStatus `protobuf:"bytes,5,opt,name=running" json:"running,omitempty"`
	Terminated  *TermStatus    `protobuf:"bytes,6,opt,name=terminated" json:"terminated,omitempty"`
}

func (m *ContainerStatus) Reset()                    { *m = ContainerStatus{} }
func (m *ContainerStatus) String() string            { return proto.CompactTextString(m) }
func (*ContainerStatus) ProtoMessage()               {}
func (*ContainerStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{6} }

func (m *ContainerStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerStatus) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ContainerStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *ContainerStatus) GetWaiting() *WaitingStatus {
	if m != nil {
		return m.Waiting
	}
	return nil
}

func (m *ContainerStatus) GetRunning() *RunningStatus {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *ContainerStatus) GetTerminated() *TermStatus {
	if m != nil {
		return m.Terminated
	}
	return nil
}

type ContainerInfo struct {
	Container *Container       `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	CreatedAt int64            `protobuf:"varint,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PodID     string           `protobuf:"bytes,3,opt,name=podID,proto3" json:"podID,omitempty"`
	Status    *ContainerStatus `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{7} }

func (m *ContainerInfo) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ContainerInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ContainerInfo) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ContainerInfo) GetStatus() *ContainerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Container struct {
	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContainerID     string            `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Image           string            `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	ImageID         string            `protobuf:"bytes,4,opt,name=imageID,proto3" json:"imageID,omitempty"`
	ImagePullPolicy string            `protobuf:"bytes,5,opt,name=imagePullPolicy,proto3" json:"imagePullPolicy,omitempty"`
	WorkingDir      string            `protobuf:"bytes,6,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	User            string            `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Tty             bool              `protobuf:"varint,8,opt,name=tty,proto3" json:"tty,omitempty"`
	Commands        []string          `protobuf:"bytes,9,rep,name=commands" json:"commands,omitempty"`
	Args            []string          `protobuf:"bytes,10,rep,name=args" json:"args,omitempty"`
	Ports           []*ContainerPort  `protobuf:"bytes,11,rep,name=ports" json:"ports,omitempty"`
	Env             []*EnvironmentVar `protobuf:"bytes,12,rep,name=env" json:"env,omitempty"`
	VolumeMounts    []*VolumeMount    `protobuf:"bytes,13,rep,name=volumeMounts" json:"volumeMounts,omitempty"`
	Labels          map[string]string `protobuf:"bytes,14,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{8} }

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Container) GetImageID() string {
	if m != nil {
		return m.ImageID
	}
	return ""
}

func (m *Container) GetImagePullPolicy() string {
	if m != nil {
		return m.ImagePullPolicy
	}
	return ""
}

func (m *Container) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

func (m *Container) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Container) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *Container) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Container) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Container) GetPorts() []*ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Container) GetEnv() []*EnvironmentVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Container) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *Container) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RBDVolumeSource struct {
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	Image    string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	FsType   string   `protobuf:"bytes,3,opt,name=fsType,proto3" json:"fsType,omitempty"`
	Pool     string   `protobuf:"bytes,4,opt,name=pool,proto3" json:"pool,omitempty"`
	User     string   `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Keyring  string   `protobuf:"bytes,6,opt,name=keyring,proto3" json:"keyring,omitempty"`
	ReadOnly bool     `protobuf:"varint,7,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
}

func (m *RBDVolumeSource) Reset()                    { *m = RBDVolumeSource{} }
func (m *RBDVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*RBDVolumeSource) ProtoMessage()               {}
func (*RBDVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{9} }

func (m *RBDVolumeSource) GetMonitors() []string {
	if m != nil {
		return m.Monitors
	}
	return nil
}

func (m *RBDVolumeSource) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *RBDVolumeSource) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *RBDVolumeSource) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *RBDVolumeSource) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RBDVolumeSource) GetKeyring() string {
	if m != nil {
		return m.Keyring
	}
	return ""
}

func (m *RBDVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type PodVolume struct {
	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source string           `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Driver string           `protobuf:"bytes,3,opt,name=driver,proto3" json:"driver,omitempty"`
	Rbd    *RBDVolumeSource `protobuf:"bytes,4,opt,name=rbd" json:"rbd,omitempty"`
}

func (m *PodVolume) Reset()                    { *m = PodVolume{} }
func (m *PodVolume) String() string            { return proto.CompactTextString(m) }
func (*PodVolume) ProtoMessage()               {}
func (*PodVolume) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{10} }

func (m *PodVolume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodVolume) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PodVolume) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *PodVolume) GetRbd() *RBDVolumeSource {
	if m != nil {
		return m.Rbd
	}
	return nil
}

type PodSpec struct {
	Volumes    []*PodVolume      `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	Containers []*Container      `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	Labels     map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Vcpu       int32             `protobuf:"varint,4,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Memory     int32             `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (m *PodSpec) Reset()                    { *m = PodSpec{} }
func (m *PodSpec) String() string            { return proto.CompactTextString(m) }
func (*PodSpec) ProtoMessage()               {}
func (*PodSpec) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{11} }

func (m *PodSpec) GetVolumes() []*PodVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PodSpec) GetVcpu() int32 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *PodSpec) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

type PodStatus struct {
	Phase           string             `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	Message         string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Reason          string             `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	HostIP          string             `protobuf:"bytes,4,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	PodIP           []string           `protobuf:"bytes,5,rep,name=podIP" json:"podIP,omitempty"`
	StartTime       string             `protobuf:"bytes,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	ContainerStatus []*ContainerStatus `protobuf:"bytes,7,rep,name=containerStatus" json:"containerStatus,omitempty"`
	FinishTime      string             `protobuf:"bytes,8,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
}

func (m *PodStatus) Reset()                    { *m = PodStatus{} }
func (m *PodStatus) String() string            { return proto.CompactTextString(m) }
func (*PodStatus) ProtoMessage()               {}
func (*PodStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{12} }

func (m *PodStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *PodStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PodStatus) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *PodStatus) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *PodStatus) GetPodIP() []string {
	if m != nil {
		return m.PodIP
	}
	return nil
}

func (m *PodStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *PodStatus) GetContainerStatus() []*ContainerStatus {
	if m != nil {
		return m.ContainerStatus
	}
	return nil
}

func (m *PodStatus) GetFinishTime() string {
	if m != nil {
		return m.FinishTime
	}
	return ""
}

type PodInfo struct {
	PodID      string     `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Kind       string     `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	ApiVersion string     `protobuf:"bytes,3,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Vm         string     `protobuf:"bytes,4,opt,name=vm,proto3" json:"vm,omitempty"`
	CreatedAt  int64      `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Spec       *PodSpec   `protobuf:"bytes,6,opt,name=spec" json:"spec,omitempty"`
	Status     *PodStatus `protobuf:"bytes,7,opt,name=status" json:"status,omitempty"`
	PodName    string     `protobuf:"bytes,8,opt,name=podName,proto3" json:"podName,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{13} }

func (m *PodInfo) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *PodInfo) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *PodInfo) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *PodInfo) GetVm() string {
	if m != nil {
		return m.Vm
	}
	return ""
}

func (m *PodInfo) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PodInfo) GetSpec() *PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PodInfo) GetStatus() *PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PodInfo) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

type ImageInfo struct {
	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID    string            `protobuf:"bytes,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	RepoTags    []string          `protobuf:"bytes,3,rep,name=repoTags" json:"repoTags,omitempty"`
	RepoDigests []string          `protobuf:"bytes,4,rep,name=repoDigests" json:"repoDigests,omitempty"`
	Created     int64             `protobuf:"varint,5,opt,name=created,proto3" json:"created,omitempty"`
	VirtualSize int64             `protobuf:"varint,6,opt,name=virtualSize,proto3" json:"virtualSize,omitempty"`
	Labels      map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ImageInfo) Reset()                    { *m = ImageInfo{} }
func (m *ImageInfo) String() string            { return proto.CompactTextString(m) }
func (*ImageInfo) ProtoMessage()               {}
func (*ImageInfo) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{14} }

func (m *ImageInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ImageInfo) GetParentID() string {
	if m != nil {
		return m.ParentID
	}
	return ""
}

func (m *ImageInfo) GetRepoTags() []string {
	if m != nil {
		return m.RepoTags
	}
	return nil
}

func (m *ImageInfo) GetRepoDigests() []string {
	if m != nil {
		return m.RepoDigests
	}
	return nil
}

func (m *ImageInfo) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *ImageInfo) GetVirtualSize() int64 {
	if m != nil {
		return m.VirtualSize
	}
	return 0
}

func (m *ImageInfo) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PodStats struct {
	Cpu             *CpuStats          `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Block           *BlkioStats        `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
	Memory          *MemoryStats       `protobuf:"bytes,3,opt,name=memory" json:"memory,omitempty"`
	Network         *NetworkStats      `protobuf:"bytes,4,opt,name=network" json:"network,omitempty"`
	Filesystem      []*FsStats         `protobuf:"bytes,5,rep,name=filesystem" json:"filesystem,omitempty"`
	Timestamp       int64              `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ContainersStats []*ContainersStats `protobuf:"bytes,7,rep,name=containersStats" json:"containersStats,omitempty"`
}

func (m *PodStats) Reset()                    { *m = PodStats{} }
func (m *PodStats) String() string            { return proto.CompactTextString(m) }
func (*PodStats) ProtoMessage()               {}
func (*PodStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{15} }

func (m *PodStats) GetCpu() *CpuStats {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *PodStats) GetBlock() *BlkioStats {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *PodStats) GetMemory() *MemoryStats {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *PodStats) GetNetwork() *NetworkStats {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *PodStats) GetFilesystem() []*FsStats {
	if m != nil {
		return m.Filesystem
	}
	return nil
}

func (m *PodStats) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PodStats) GetContainersStats() []*ContainersStats {
	if m != nil {
		return m.ContainersStats
	}
	return nil
}

type CpuStats struct {
	Usage       *CpuUsage `protobuf:"bytes,1,opt,name=usage" json:"usage,omitempty"`
	LoadAverage int32     `protobuf:"varint,2,opt,name=LoadAverage,proto3" json:"LoadAverage,omitempty"`
}

func (m *CpuStats) Reset()                    { *m = CpuStats{} }
func (m *CpuStats) String() string            { return proto.CompactTextString(m) }
func (*CpuStats) ProtoMessage()               {}
func (*CpuStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{16} }

func (m *CpuStats) GetUsage() *CpuUsage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CpuStats) GetLoadAverage() int32 {
	if m != nil {
		return m.LoadAverage
	}
	return 0
}

type CpuUsage struct {
	Total  uint64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PerCpu []uint64 `protobuf:"varint,2,rep,packed,name=perCpu" json:"perCpu,omitempty"`
	User   uint64   `protobuf:"varint,3,opt,name=user,proto3" json:"user,omitempty"`
	System uint64   `protobuf:"varint,4,opt,name=system,proto3" json:"system,omitempty"`
}

func (m *CpuUsage) Reset()                    { *m = CpuUsage{} }
func (m *CpuUsage) String() string            { return proto.CompactTextString(m) }
func (*CpuUsage) ProtoMessage()               {}
func (*CpuUsage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{17} }

func (m *CpuUsage) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *CpuUsage) GetPerCpu() []uint64 {
	if m != nil {
		return m.PerCpu
	}
	return nil
}

func (m *CpuUsage) GetUser() uint64 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *CpuUsage) GetSystem() uint64 {
	if m != nil {
		return m.System
	}
	return 0
}

type BlkioStats struct {
	IoServiceBytesRecursive []*BlkioStatEntry `protobuf:"bytes,1,rep,name=ioServiceBytesRecursive" json:"ioServiceBytesRecursive,omitempty"`
	IoServicedRecursive     []*BlkioStatEntry `protobuf:"bytes,2,rep,name=ioServicedRecursive" json:"ioServicedRecursive,omitempty"`
	IoQueuedRecursive       []*BlkioStatEntry `protobuf:"bytes,3,rep,name=ioQueuedRecursive" json:"ioQueuedRecursive,omitempty"`
	IoServiceTimeRecursive  []*BlkioStatEntry `protobuf:"bytes,4,rep,name=ioServiceTimeRecursive" json:"ioServiceTimeRecursive,omitempty"`
	IoWaitTimeRecursive     []*BlkioStatEntry `protobuf:"bytes,5,rep,name=ioWaitTimeRecursive" json:"ioWaitTimeRecursive,omitempty"`
	IoMergedRecursive       []*BlkioStatEntry `protobuf:"bytes,6,rep,name=ioMergedRecursive" json:"ioMergedRecursive,omitempty"`
	IoTimeRecursive         []*BlkioStatEntry `protobuf:"bytes,7,rep,name=ioTimeRecursive" json:"ioTimeRecursive,omitempty"`
	SectorsRecursive        []*BlkioStatEntry `protobuf:"bytes,8,rep,name=sectorsRecursive" json:"sectorsRecursive,omitempty"`
}

func (m *BlkioStats) Reset()                    { *m = BlkioStats{} }
func (m *BlkioStats) String() string            { return proto.CompactTextString(m) }
func (*BlkioStats) ProtoMessage()               {}
func (*BlkioStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{18} }

func (m *BlkioStats) GetIoServiceBytesRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoServiceBytesRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoServicedRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoServicedRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoQueuedRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoQueuedRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoServiceTimeRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoServiceTimeRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoWaitTimeRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoWaitTimeRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoMergedRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoMergedRecursive
	}
	return nil
}

func (m *BlkioStats) GetIoTimeRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.IoTimeRecursive
	}
	return nil
}

func (m *BlkioStats) GetSectorsRecursive() []*BlkioStatEntry {
	if m != nil {
		return m.SectorsRecursive
	}
	return nil
}

type BlkioStatEntry struct {
	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Source string            `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Major  uint64            `protobuf:"varint,4,opt,name=major,proto3" json:"major,omitempty"`
	Minor  uint64            `protobuf:"varint,5,opt,name=minor,proto3" json:"minor,omitempty"`
	Stat   map[string]uint64 `protobuf:"bytes,6,rep,name=stat" json:"stat,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *BlkioStatEntry) Reset()                    { *m = BlkioStatEntry{} }
func (m *BlkioStatEntry) String() string            { return proto.CompactTextString(m) }
func (*BlkioStatEntry) ProtoMessage()               {}
func (*BlkioStatEntry) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{19} }

func (m *BlkioStatEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlkioStatEntry) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BlkioStatEntry) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BlkioStatEntry) GetMajor() uint64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *BlkioStatEntry) GetMinor() uint64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *BlkioStatEntry) GetStat() map[string]uint64 {
	if m != nil {
		return m.Stat
	}
	return nil
}

type MemoryStats struct {
	Usage            uint64                 `protobuf:"varint,1,opt,name=usage,proto3" json:"usage,omitempty"`
	WorkingSet       uint64                 `protobuf:"varint,2,opt,name=workingSet,proto3" json:"workingSet,omitempty"`
	Failcnt          uint64                 `protobuf:"varint,3,opt,name=failcnt,proto3" json:"failcnt,omitempty"`
	ContainerData    *MemoryStatsMemoryData `protobuf:"bytes,4,opt,name=containerData" json:"containerData,omitempty"`
	HierarchicalData *MemoryStatsMemoryData `protobuf:"bytes,5,opt,name=hierarchicalData" json:"hierarchicalData,omitempty"`
}

func (m *MemoryStats) Reset()                    { *m = MemoryStats{} }
func (m *MemoryStats) String() string            { return proto.CompactTextString(m) }
func (*MemoryStats) ProtoMessage()               {}
func (*MemoryStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{20} }

func (m *MemoryStats) GetUsage() uint64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *MemoryStats) GetWorkingSet() uint64 {
	if m != nil {
		return m.WorkingSet
	}
	return 0
}

func (m *MemoryStats) GetFailcnt() uint64 {
	if m != nil {
		return m.Failcnt
	}
	return 0
}

func (m *MemoryStats) GetContainerData() *MemoryStatsMemoryData {
	if m != nil {
		return m.ContainerData
	}
	return nil
}

func (m *MemoryStats) GetHierarchicalData() *MemoryStatsMemoryData {
	if m != nil {
		return m.HierarchicalData
	}
	return nil
}

type MemoryStatsMemoryData struct {
	Pgfault    uint64 `protobuf:"varint,1,opt,name=pgfault,proto3" json:"pgfault,omitempty"`
	Pgmajfault uint64 `protobuf:"varint,2,opt,name=pgmajfault,proto3" json:"pgmajfault,omitempty"`
}

func (m *MemoryStatsMemoryData) Reset()                    { *m = MemoryStatsMemoryData{} }
func (m *MemoryStatsMemoryData) String() string            { return proto.CompactTextString(m) }
func (*MemoryStatsMemoryData) ProtoMessage()               {}
func (*MemoryStatsMemoryData) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{21} }

func (m *MemoryStatsMemoryData) GetPgfault() uint64 {
	if m != nil {
		return m.Pgfault
	}
	return 0
}

func (m *MemoryStatsMemoryData) GetPgmajfault() uint64 {
	if m != nil {
		return m.Pgmajfault
	}
	return 0
}

type NetworkStats struct {
	Interfaces []*InterfaceStats `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
	Tcp        *TcpStat          `protobuf:"bytes,2,opt,name=tcp" json:"tcp,omitempty"`
	Tcp6       *TcpStat          `protobuf:"bytes,3,opt,name=tcp6" json:"tcp6,omitempty"`
}

func (m *NetworkStats) Reset()                    { *m = NetworkStats{} }
func (m *NetworkStats) String() string            { return proto.CompactTextString(m) }
func (*NetworkStats) ProtoMessage()               {}
func (*NetworkStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{22} }

func (m *NetworkStats) GetInterfaces() []*InterfaceStats {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *NetworkStats) GetTcp() *TcpStat {
	if m != nil {
		return m.Tcp
	}
	return nil
}

func (m *NetworkStats) GetTcp6() *TcpStat {
	if m != nil {
		return m.Tcp6
	}
	return nil
}

type TcpStat struct {
	Established uint64 `protobuf:"varint,1,opt,name=established,proto3" json:"established,omitempty"`
	SynSent     uint64 `protobuf:"varint,2,opt,name=synSent,proto3" json:"synSent,omitempty"`
	SynRecv     uint64 `protobuf:"varint,3,opt,name=synRecv,proto3" json:"synRecv,omitempty"`
	FinWait1    uint64 `protobuf:"varint,4,opt,name=finWait1,proto3" json:"finWait1,omitempty"`
	FinWait2    uint64 `protobuf:"varint,5,opt,name=finWait2,proto3" json:"finWait2,omitempty"`
	TimeWait    uint64 `protobuf:"varint,6,opt,name=timeWait,proto3" json:"timeWait,omitempty"`
	Close       uint64 `protobuf:"varint,7,opt,name=close,proto3" json:"close,omitempty"`
	CloseWait   uint64 `protobuf:"varint,8,opt,name=closeWait,proto3" json:"closeWait,omitempty"`
	LastAck     uint64 `protobuf:"varint,9,opt,name=lastAck,proto3" json:"lastAck,omitempty"`
	Listen      uint64 `protobuf:"varint,10,opt,name=listen,proto3" json:"listen,omitempty"`
	Closing     uint64 `protobuf:"varint,11,opt,name=closing,proto3" json:"closing,omitempty"`
}

func (m *TcpStat) Reset()                    { *m = TcpStat{} }
func (m *TcpStat) String() string            { return proto.CompactTextString(m) }
func (*TcpStat) ProtoMessage()               {}
func (*TcpStat) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{23} }

func (m *TcpStat) GetEstablished() uint64 {
	if m != nil {
		return m.Established
	}
	return 0
}

func (m *TcpStat) GetSynSent() uint64 {
	if m != nil {
		return m.SynSent
	}
	return 0
}

func (m *TcpStat) GetSynRecv() uint64 {
	if m != nil {
		return m.SynRecv
	}
	return 0
}

func (m *TcpStat) GetFinWait1() uint64 {
	if m != nil {
		return m.FinWait1
	}
	return 0
}

func (m *TcpStat) GetFinWait2() uint64 {
	if m != nil {
		return m.FinWait2
	}
	return 0
}

func (m *TcpStat) GetTimeWait() uint64 {
	if m != nil {
		return m.TimeWait
	}
	return 0
}

func (m *TcpStat) GetClose() uint64 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *TcpStat) GetCloseWait() uint64 {
	if m != nil {
		return m.CloseWait
	}
	return 0
}

func (m *TcpStat) GetLastAck() uint64 {
	if m != nil {
		return m.LastAck
	}
	return 0
}

func (m *TcpStat) GetListen() uint64 {
	if m != nil {
		return m.Listen
	}
	return 0
}

func (m *TcpStat) GetClosing() uint64 {
	if m != nil {
		return m.Closing
	}
	return 0
}

type InterfaceStats struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RxBytes   uint64 `protobuf:"varint,2,opt,name=rxBytes,proto3" json:"rxBytes,omitempty"`
	RxPackets uint64 `protobuf:"varint,3,opt,name=rxPackets,proto3" json:"rxPackets,omitempty"`
	RxErrors  uint64 `protobuf:"varint,4,opt,name=rxErrors,proto3" json:"rxErrors,omitempty"`
	RxDropped uint64 `protobuf:"varint,5,opt,name=rxDropped,proto3" json:"rxDropped,omitempty"`
	TxBytes   uint64 `protobuf:"varint,6,opt,name=txBytes,proto3" json:"txBytes,omitempty"`
	TxPackets uint64 `protobuf:"varint,7,opt,name=txPackets,proto3" json:"txPackets,omitempty"`
	TxErrors  uint64 `protobuf:"varint,8,opt,name=txErrors,proto3" json:"txErrors,omitempty"`
	TxDropped uint64 `protobuf:"varint,9,opt,name=txDropped,proto3" json:"txDropped,omitempty"`
}

func (m *InterfaceStats) Reset()                    { *m = InterfaceStats{} }
func (m *InterfaceStats) String() string            { return proto.CompactTextString(m) }
func (*InterfaceStats) ProtoMessage()               {}
func (*InterfaceStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{24} }

func (m *InterfaceStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceStats) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *InterfaceStats) GetRxPackets() uint64 {
	if m != nil {
		return m.RxPackets
	}
	return 0
}

func (m *InterfaceStats) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

func (m *InterfaceStats) GetRxDropped() uint64 {
	if m != nil {
		return m.RxDropped
	}
	return 0
}

func (m *InterfaceStats) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *InterfaceStats) GetTxPackets() uint64 {
	if m != nil {
		return m.TxPackets
	}
	return 0
}

func (m *InterfaceStats) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *InterfaceStats) GetTxDropped() uint64 {
	if m != nil {
		return m.TxDropped
	}
	return 0
}

type FsStats struct {
	Device          string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Limit           uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Usage           uint64 `protobuf:"varint,3,opt,name=usage,proto3" json:"usage,omitempty"`
	Available       uint64 `protobuf:"varint,4,opt,name=available,proto3" json:"available,omitempty"`
	ReadsCompleted  uint64 `protobuf:"varint,5,opt,name=readsCompleted,proto3" json:"readsCompleted,omitempty"`
	ReadsMerged     uint64 `protobuf:"varint,6,opt,name=readsMerged,proto3" json:"readsMerged,omitempty"`
	SectorsRead     uint64 `protobuf:"varint,7,opt,name=sectorsRead,proto3" json:"sectorsRead,omitempty"`
	ReadTime        uint64 `protobuf:"varint,8,opt,name=readTime,proto3" json:"readTime,omitempty"`
	WritesCompleted uint64 `protobuf:"varint,9,opt,name=writesCompleted,proto3" json:"writesCompleted,omitempty"`
	WritesMerged    uint64 `protobuf:"varint,10,opt,name=writesMerged,proto3" json:"writesMerged,omitempty"`
	SectorsWritten  uint64 `protobuf:"varint,11,opt,name=sectorsWritten,proto3" json:"sectorsWritten,omitempty"`
	WriteTime       uint64 `protobuf:"varint,12,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	IoInProgress    uint64 `protobuf:"varint,13,opt,name=ioInProgress,proto3" json:"ioInProgress,omitempty"`
	IoTime          uint64 `protobuf:"varint,14,opt,name=ioTime,proto3" json:"ioTime,omitempty"`
	WeightedIoTime  uint64 `protobuf:"varint,15,opt,name=weightedIoTime,proto3" json:"weightedIoTime,omitempty"`
}

func (m *FsStats) Reset()                    { *m = FsStats{} }
func (m *FsStats) String() string            { return proto.CompactTextString(m) }
func (*FsStats) ProtoMessage()               {}
func (*FsStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{25} }

func (m *FsStats) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *FsStats) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FsStats) GetUsage() uint64 {
	if m != nil {
		return m.Usage
	}
	return 0
}

func (m *FsStats) GetAvailable() uint64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *FsStats) GetReadsCompleted() uint64 {
	if m != nil {
		return m.ReadsCompleted
	}
	return 0
}

func (m *FsStats) GetReadsMerged() uint64 {
	if m != nil {
		return m.ReadsMerged
	}
	return 0
}

func (m *FsStats) GetSectorsRead() uint64 {
	if m != nil {
		return m.SectorsRead
	}
	return 0
}

func (m *FsStats) GetReadTime() uint64 {
	if m != nil {
		return m.ReadTime
	}
	return 0
}

func (m *FsStats) GetWritesCompleted() uint64 {
	if m != nil {
		return m.WritesCompleted
	}
	return 0
}

func (m *FsStats) GetWritesMerged() uint64 {
	if m != nil {
		return m.WritesMerged
	}
	return 0
}

func (m *FsStats) GetSectorsWritten() uint64 {
	if m != nil {
		return m.SectorsWritten
	}
	return 0
}

func (m *FsStats) GetWriteTime() uint64 {
	if m != nil {
		return m.WriteTime
	}
	return 0
}

func (m *FsStats) GetIoInProgress() uint64 {
	if m != nil {
		return m.IoInProgress
	}
	return 0
}

func (m *FsStats) GetIoTime() uint64 {
	if m != nil {
		return m.IoTime
	}
	return 0
}

func (m *FsStats) GetWeightedIoTime() uint64 {
	if m != nil {
		return m.WeightedIoTime
	}
	return 0
}

type ContainersStats struct {
	ContainerID string        `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Cpu         *CpuStats     `protobuf:"bytes,2,opt,name=cpu" json:"cpu,omitempty"`
	Block       *BlkioStats   `protobuf:"bytes,3,opt,name=block" json:"block,omitempty"`
	Memory      *MemoryStats  `protobuf:"bytes,4,opt,name=memory" json:"memory,omitempty"`
	Network     *NetworkStats `protobuf:"bytes,5,opt,name=network" json:"network,omitempty"`
	Filesystem  []*FsStats    `protobuf:"bytes,6,rep,name=filesystem" json:"filesystem,omitempty"`
	Timestamp   int64         `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ContainersStats) Reset()                    { *m = ContainersStats{} }
func (m *ContainersStats) String() string            { return proto.CompactTextString(m) }
func (*ContainersStats) ProtoMessage()               {}
func (*ContainersStats) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{26} }

func (m *ContainersStats) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ContainersStats) GetCpu() *CpuStats {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *ContainersStats) GetBlock() *BlkioStats {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ContainersStats) GetMemory() *MemoryStats {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *ContainersStats) GetNetwork() *NetworkStats {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *ContainersStats) GetFilesystem() []*FsStats {
	if m != nil {
		return m.Filesystem
	}
	return nil
}

func (m *ContainersStats) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PodInfoRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodInfoRequest) Reset()                    { *m = PodInfoRequest{} }
func (m *PodInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PodInfoRequest) ProtoMessage()               {}
func (*PodInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{27} }

func (m *PodInfoRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodInfoResponse struct {
	PodInfo *PodInfo `protobuf:"bytes,1,opt,name=podInfo" json:"podInfo,omitempty"`
}

func (m *PodInfoResponse) Reset()                    { *m = PodInfoResponse{} }
func (m *PodInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*PodInfoResponse) ProtoMessage()               {}
func (*PodInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{28} }

func (m *PodInfoResponse) GetPodInfo() *PodInfo {
	if m != nil {
		return m.PodInfo
	}
	return nil
}

type PodListRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	VmID  string `protobuf:"bytes,2,opt,name=vmID,proto3" json:"vmID,omitempty"`
}

func (m *PodListRequest) Reset()                    { *m = PodListRequest{} }
func (m *PodListRequest) String() string            { return proto.CompactTextString(m) }
func (*PodListRequest) ProtoMessage()               {}
func (*PodListRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{29} }

func (m *PodListRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *PodListRequest) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

type PodListResult struct {
	PodID     string            `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	PodName   string            `protobuf:"bytes,2,opt,name=podName,proto3" json:"podName,omitempty"`
	VmID      string            `protobuf:"bytes,3,opt,name=vmID,proto3" json:"vmID,omitempty"`
	Status    string            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt int64             `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Labels    map[string]string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PodListResult) Reset()                    { *m = PodListResult{} }
func (m *PodListResult) String() string            { return proto.CompactTextString(m) }
func (*PodListResult) ProtoMessage()               {}
func (*PodListResult) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{30} }

func (m *PodListResult) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *PodListResult) GetPodName() string {
	if m != nil {
		return m.PodName
	}
	return ""
}

func (m *PodListResult) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

func (m *PodListResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PodListResult) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *PodListResult) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PodListResponse struct {
	PodList []*PodListResult `protobuf:"bytes,1,rep,name=podList" json:"podList,omitempty"`
}

func (m *PodListResponse) Reset()                    { *m = PodListResponse{} }
func (m *PodListResponse) String() string            { return proto.CompactTextString(m) }
func (*PodListResponse) ProtoMessage()               {}
func (*PodListResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{31} }

func (m *PodListResponse) GetPodList() []*PodListResult {
	if m != nil {
		return m.PodList
	}
	return nil
}

type ContainerListRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	VmID  string `protobuf:"bytes,2,opt,name=vmID,proto3" json:"vmID,omitempty"`
}

func (m *ContainerListRequest) Reset()                    { *m = ContainerListRequest{} }
func (m *ContainerListRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerListRequest) ProtoMessage()               {}
func (*ContainerListRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{32} }

func (m *ContainerListRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ContainerListRequest) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

type ContainerListResult struct {
	ContainerID   string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ContainerName string `protobuf:"bytes,2,opt,name=containerName,proto3" json:"containerName,omitempty"`
	PodID         string `protobuf:"bytes,3,opt,name=podID,proto3" json:"podID,omitempty"`
	Status        string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *ContainerListResult) Reset()                    { *m = ContainerListResult{} }
func (m *ContainerListResult) String() string            { return proto.CompactTextString(m) }
func (*ContainerListResult) ProtoMessage()               {}
func (*ContainerListResult) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{33} }

func (m *ContainerListResult) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ContainerListResult) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *ContainerListResult) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ContainerListResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ContainerListResponse struct {
	ContainerList []*ContainerListResult `protobuf:"bytes,1,rep,name=containerList" json:"containerList,omitempty"`
}

func (m *ContainerListResponse) Reset()                    { *m = ContainerListResponse{} }
func (m *ContainerListResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerListResponse) ProtoMessage()               {}
func (*ContainerListResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{34} }

func (m *ContainerListResponse) GetContainerList() []*ContainerListResult {
	if m != nil {
		return m.ContainerList
	}
	return nil
}

type ContainerInfoRequest struct {
	// container is the name or id of specified container
	Container string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
}

func (m *ContainerInfoRequest) Reset()                    { *m = ContainerInfoRequest{} }
func (m *ContainerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfoRequest) ProtoMessage()               {}
func (*ContainerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{35} }

func (m *ContainerInfoRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

type ContainerInfoResponse struct {
	ContainerInfo *ContainerInfo `protobuf:"bytes,1,opt,name=containerInfo" json:"containerInfo,omitempty"`
}

func (m *ContainerInfoResponse) Reset()                    { *m = ContainerInfoResponse{} }
func (m *ContainerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfoResponse) ProtoMessage()               {}
func (*ContainerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{36} }

func (m *ContainerInfoResponse) GetContainerInfo() *ContainerInfo {
	if m != nil {
		return m.ContainerInfo
	}
	return nil
}

type VMListResult struct {
	VmID   string `protobuf:"bytes,1,opt,name=vmID,proto3" json:"vmID,omitempty"`
	PodID  string `protobuf:"bytes,2,opt,name=podID,proto3" json:"podID,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *VMListResult) Reset()                    { *m = VMListResult{} }
func (m *VMListResult) String() string            { return proto.CompactTextString(m) }
func (*VMListResult) ProtoMessage()               {}
func (*VMListResult) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{37} }

func (m *VMListResult) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

func (m *VMListResult) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *VMListResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type VMListRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	VmID  string `protobuf:"bytes,2,opt,name=vmID,proto3" json:"vmID,omitempty"`
}

func (m *VMListRequest) Reset()                    { *m = VMListRequest{} }
func (m *VMListRequest) String() string            { return proto.CompactTextString(m) }
func (*VMListRequest) ProtoMessage()               {}
func (*VMListRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{38} }

func (m *VMListRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *VMListRequest) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

type VMListResponse struct {
	VmList []*VMListResult `protobuf:"bytes,1,rep,name=vmList" json:"vmList,omitempty"`
}

func (m *VMListResponse) Reset()                    { *m = VMListResponse{} }
func (m *VMListResponse) String() string            { return proto.CompactTextString(m) }
func (*VMListResponse) ProtoMessage()               {}
func (*VMListResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{39} }

func (m *VMListResponse) GetVmList() []*VMListResult {
	if m != nil {
		return m.VmList
	}
	return nil
}

type ImageListRequest struct {
	// filterArgs is a JSON-encoded set of filter arguments
	FilterArgs string `protobuf:"bytes,1,opt,name=filterArgs,proto3" json:"filterArgs,omitempty"`
	// filter is a shell glob string applied to repository names
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// all controls whether all images in the graph are filtered, or just the heads
	All bool `protobuf:"varint,3,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *ImageListRequest) Reset()                    { *m = ImageListRequest{} }
func (m *ImageListRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageListRequest) ProtoMessage()               {}
func (*ImageListRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{40} }

func (m *ImageListRequest) GetFilterArgs() string {
	if m != nil {
		return m.FilterArgs
	}
	return ""
}

func (m *ImageListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ImageListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type ImageListResponse struct {
	ImageList []*ImageInfo `protobuf:"bytes,1,rep,name=imageList" json:"imageList,omitempty"`
}

func (m *ImageListResponse) Reset()                    { *m = ImageListResponse{} }
func (m *ImageListResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageListResponse) ProtoMessage()               {}
func (*ImageListResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{41} }

func (m *ImageListResponse) GetImageList() []*ImageInfo {
	if m != nil {
		return m.ImageList
	}
	return nil
}

type VMCreateRequest struct {
	Cpu    int32 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory int32 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (m *VMCreateRequest) Reset()                    { *m = VMCreateRequest{} }
func (m *VMCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*VMCreateRequest) ProtoMessage()               {}
func (*VMCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{42} }

func (m *VMCreateRequest) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *VMCreateRequest) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

type VMCreateResponse struct {
	VmID string `protobuf:"bytes,1,opt,name=vmID,proto3" json:"vmID,omitempty"`
}

func (m *VMCreateResponse) Reset()                    { *m = VMCreateResponse{} }
func (m *VMCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*VMCreateResponse) ProtoMessage()               {}
func (*VMCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{43} }

func (m *VMCreateResponse) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

type VMRemoveRequest struct {
	VmID string `protobuf:"bytes,1,opt,name=vmID,proto3" json:"vmID,omitempty"`
}

func (m *VMRemoveRequest) Reset()                    { *m = VMRemoveRequest{} }
func (m *VMRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*VMRemoveRequest) ProtoMessage()               {}
func (*VMRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{44} }

func (m *VMRemoveRequest) GetVmID() string {
	if m != nil {
		return m.VmID
	}
	return ""
}

type VMRemoveResponse struct {
	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Cause string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (m *VMRemoveResponse) Reset()                    { *m = VMRemoveResponse{} }
func (m *VMRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*VMRemoveResponse) ProtoMessage()               {}
func (*VMRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{45} }

func (m *VMRemoveResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VMRemoveResponse) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

type UserContainerPort struct {
	HostPort      int32  `protobuf:"varint,1,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	ContainerPort int32  `protobuf:"varint,2,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	ServicePort   int32  `protobuf:"varint,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	Protocol      string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *UserContainerPort) Reset()                    { *m = UserContainerPort{} }
func (m *UserContainerPort) String() string            { return proto.CompactTextString(m) }
func (*UserContainerPort) ProtoMessage()               {}
func (*UserContainerPort) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{46} }

func (m *UserContainerPort) GetHostPort() int32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *UserContainerPort) GetContainerPort() int32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *UserContainerPort) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *UserContainerPort) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type UserVolumeReference struct {
	Path     string      `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Volume   string      `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	ReadOnly bool        `protobuf:"varint,3,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	Detail   *UserVolume `protobuf:"bytes,4,opt,name=detail" json:"detail,omitempty"`
}

func (m *UserVolumeReference) Reset()                    { *m = UserVolumeReference{} }
func (m *UserVolumeReference) String() string            { return proto.CompactTextString(m) }
func (*UserVolumeReference) ProtoMessage()               {}
func (*UserVolumeReference) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{47} }

func (m *UserVolumeReference) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UserVolumeReference) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *UserVolumeReference) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *UserVolumeReference) GetDetail() *UserVolume {
	if m != nil {
		return m.Detail
	}
	return nil
}

type UserFileReference struct {
	Path     string    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Filename string    `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Perm     string    `protobuf:"bytes,3,opt,name=perm,proto3" json:"perm,omitempty"`
	User     string    `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Group    string    `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	Detail   *UserFile `protobuf:"bytes,6,opt,name=detail" json:"detail,omitempty"`
}

func (m *UserFileReference) Reset()                    { *m = UserFileReference{} }
func (m *UserFileReference) String() string            { return proto.CompactTextString(m) }
func (*UserFileReference) ProtoMessage()               {}
func (*UserFileReference) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{48} }

func (m *UserFileReference) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UserFileReference) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *UserFileReference) GetPerm() string {
	if m != nil {
		return m.Perm
	}
	return ""
}

func (m *UserFileReference) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserFileReference) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UserFileReference) GetDetail() *UserFile {
	if m != nil {
		return m.Detail
	}
	return nil
}

type UserUser struct {
	Name             string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group            string   `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	AdditionalGroups []string `protobuf:"bytes,3,rep,name=additionalGroups" json:"additionalGroups,omitempty"`
}

func (m *UserUser) Reset()                    { *m = UserUser{} }
func (m *UserUser) String() string            { return proto.CompactTextString(m) }
func (*UserUser) ProtoMessage()               {}
func (*UserUser) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{49} }

func (m *UserUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserUser) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UserUser) GetAdditionalGroups() []string {
	if m != nil {
		return m.AdditionalGroups
	}
	return nil
}

type Ulimit struct {
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Hard uint64 `protobuf:"varint,2,opt,name=Hard,proto3" json:"Hard,omitempty"`
	Soft uint64 `protobuf:"varint,3,opt,name=Soft,proto3" json:"Soft,omitempty"`
}

func (m *Ulimit) Reset()                    { *m = Ulimit{} }
func (m *Ulimit) String() string            { return proto.CompactTextString(m) }
func (*Ulimit) ProtoMessage()               {}
func (*Ulimit) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{50} }

func (m *Ulimit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Ulimit) GetHard() uint64 {
	if m != nil {
		return m.Hard
	}
	return 0
}

func (m *Ulimit) GetSoft() uint64 {
	if m != nil {
		return m.Soft
	}
	return 0
}

type UserContainer struct {
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image         string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Workdir       string                 `protobuf:"bytes,3,opt,name=workdir,proto3" json:"workdir,omitempty"`
	RestartPolicy string                 `protobuf:"bytes,4,opt,name=restartPolicy,proto3" json:"restartPolicy,omitempty"`
	Tty           bool                   `protobuf:"varint,5,opt,name=tty,proto3" json:"tty,omitempty"`
	Sysctl        map[string]string      `protobuf:"bytes,6,rep,name=sysctl" json:"sysctl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Envs          []*EnvironmentVar      `protobuf:"bytes,7,rep,name=envs" json:"envs,omitempty"`
	Command       []string               `protobuf:"bytes,8,rep,name=command" json:"command,omitempty"`
	Entrypoint    []string               `protobuf:"bytes,9,rep,name=entrypoint" json:"entrypoint,omitempty"`
	Ports         []*UserContainerPort   `protobuf:"bytes,10,rep,name=ports" json:"ports,omitempty"`
	Volumes       []*UserVolumeReference `protobuf:"bytes,11,rep,name=volumes" json:"volumes,omitempty"`
	Files         []*UserFileReference   `protobuf:"bytes,12,rep,name=files" json:"files,omitempty"`
	User          *UserUser              `protobuf:"bytes,13,opt,name=user" json:"user,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,14,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id            string                 `protobuf:"bytes,15,opt,name=id,proto3" json:"id,omitempty"`
	StopSignal    string                 `protobuf:"bytes,17,opt,name=StopSignal,proto3" json:"StopSignal,omitempty"`
	Ulimits       []*Ulimit              `protobuf:"bytes,18,rep,name=ulimits" json:"ulimits,omitempty"`
	LogPath       string                 `protobuf:"bytes,19,opt,name=logPath,proto3" json:"logPath,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,20,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
}

func (m *UserContainer) Reset()                    { *m = UserContainer{} }
func (m *UserContainer) String() string            { return proto.CompactTextString(m) }
func (*UserContainer) ProtoMessage()               {}
func (*UserContainer) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{51} }

func (m *UserContainer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserContainer) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *UserContainer) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *UserContainer) GetRestartPolicy() string {
	if m != nil {
		return m.RestartPolicy
	}
	return ""
}

func (m *UserContainer) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *UserContainer) GetSysctl() map[string]string {
	if m != nil {
		return m.Sysctl
	}
	return nil
}

func (m *UserContainer) GetEnvs() []*EnvironmentVar {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *UserContainer) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *UserContainer) GetEntrypoint() []string {
	if m != nil {
		return m.Entrypoint
	}
	return nil
}

func (m *UserContainer) GetPorts() []*UserContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *UserContainer) GetVolumes() []*UserVolumeReference {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *UserContainer) GetFiles() []*UserFileReference {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *UserContainer) GetUser() *UserUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserContainer) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UserContainer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserContainer) GetStopSignal() string {
	if m != nil {
		return m.StopSignal
	}
	return ""
}

func (m *UserContainer) GetUlimits() []*Ulimit {
	if m != nil {
		return m.Ulimits
	}
	return nil
}

func (m *UserContainer) GetLogPath() string {
	if m != nil {
		return m.LogPath
	}
	return ""
}

func (m *UserContainer) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type UserResource struct {
	Vcpu   int32 `protobuf:"varint,1,opt,name=vcpu,proto3" json:"vcpu,omitempty"`
	Memory int32 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (m *UserResource) Reset()                    { *m = UserResource{} }
func (m *UserResource) String() string            { return proto.CompactTextString(m) }
func (*UserResource) ProtoMessage()               {}
func (*UserResource) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{52} }

func (m *UserResource) GetVcpu() int32 {
	if m != nil {
		return m.Vcpu
	}
	return 0
}

func (m *UserResource) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

type UserFile struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Encoding string `protobuf:"bytes,2,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Uri      string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *UserFile) Reset()                    { *m = UserFile{} }
func (m *UserFile) String() string            { return proto.CompactTextString(m) }
func (*UserFile) ProtoMessage()               {}
func (*UserFile) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{53} }

func (m *UserFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserFile) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *UserFile) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *UserFile) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type UserVolumeOption struct {
	User     string   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Keyring  string   `protobuf:"bytes,2,opt,name=keyring,proto3" json:"keyring,omitempty"`
	Monitors []string `protobuf:"bytes,3,rep,name=monitors" json:"monitors,omitempty"`
}

func (m *UserVolumeOption) Reset()                    { *m = UserVolumeOption{} }
func (m *UserVolumeOption) String() string            { return proto.CompactTextString(m) }
func (*UserVolumeOption) ProtoMessage()               {}
func (*UserVolumeOption) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{54} }

func (m *UserVolumeOption) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserVolumeOption) GetKeyring() string {
	if m != nil {
		return m.Keyring
	}
	return ""
}

func (m *UserVolumeOption) GetMonitors() []string {
	if m != nil {
		return m.Monitors
	}
	return nil
}

type UserVolume struct {
	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source string            `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Format string            `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Option *UserVolumeOption `protobuf:"bytes,4,opt,name=option" json:"option,omitempty"`
	Fstype string            `protobuf:"bytes,5,opt,name=fstype,proto3" json:"fstype,omitempty"`
}

func (m *UserVolume) Reset()                    { *m = UserVolume{} }
func (m *UserVolume) String() string            { return proto.CompactTextString(m) }
func (*UserVolume) ProtoMessage()               {}
func (*UserVolume) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{55} }

func (m *UserVolume) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserVolume) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *UserVolume) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *UserVolume) GetOption() *UserVolumeOption {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *UserVolume) GetFstype() string {
	if m != nil {
		return m.Fstype
	}
	return ""
}

type UserInterface struct {
	Bridge  string `protobuf:"bytes,1,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Ifname  string `protobuf:"bytes,3,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Mac     string `protobuf:"bytes,4,opt,name=mac,proto3" json:"mac,omitempty"`
	Gateway string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Tap     string `protobuf:"bytes,6,opt,name=tap,proto3" json:"tap,omitempty"`
}

func (m *UserInterface) Reset()                    { *m = UserInterface{} }
func (m *UserInterface) String() string            { return proto.CompactTextString(m) }
func (*UserInterface) ProtoMessage()               {}
func (*UserInterface) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{56} }

func (m *UserInterface) GetBridge() string {
	if m != nil {
		return m.Bridge
	}
	return ""
}

func (m *UserInterface) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *UserInterface) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *UserInterface) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *UserInterface) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *UserInterface) GetTap() string {
	if m != nil {
		return m.Tap
	}
	return ""
}

type UserServiceBackend struct {
	HostIP   string `protobuf:"bytes,1,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	HostPort int32  `protobuf:"varint,2,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
}

func (m *UserServiceBackend) Reset()                    { *m = UserServiceBackend{} }
func (m *UserServiceBackend) String() string            { return proto.CompactTextString(m) }
func (*UserServiceBackend) ProtoMessage()               {}
func (*UserServiceBackend) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{57} }

func (m *UserServiceBackend) GetHostIP() string {
	if m != nil {
		return m.HostIP
	}
	return ""
}

func (m *UserServiceBackend) GetHostPort() int32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

type UserService struct {
	ServiceIP   string                `protobuf:"bytes,1,opt,name=serviceIP,proto3" json:"serviceIP,omitempty"`
	Protocol    string                `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ServicePort int32                 `protobuf:"varint,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
	Hosts       []*UserServiceBackend `protobuf:"bytes,4,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *UserService) Reset()                    { *m = UserService{} }
func (m *UserService) String() string            { return proto.CompactTextString(m) }
func (*UserService) ProtoMessage()               {}
func (*UserService) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{58} }

func (m *UserService) GetServiceIP() string {
	if m != nil {
		return m.ServiceIP
	}
	return ""
}

func (m *UserService) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *UserService) GetServicePort() int32 {
	if m != nil {
		return m.ServicePort
	}
	return 0
}

func (m *UserService) GetHosts() []*UserServiceBackend {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type PodLogConfig struct {
	Type   string            `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PodLogConfig) Reset()                    { *m = PodLogConfig{} }
func (m *PodLogConfig) String() string            { return proto.CompactTextString(m) }
func (*PodLogConfig) ProtoMessage()               {}
func (*PodLogConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{59} }

func (m *PodLogConfig) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PodLogConfig) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type PortMapping struct {
	ContainerPort string `protobuf:"bytes,1,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	HostPort      string `protobuf:"bytes,2,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *PortMapping) Reset()                    { *m = PortMapping{} }
func (m *PortMapping) String() string            { return proto.CompactTextString(m) }
func (*PortMapping) ProtoMessage()               {}
func (*PortMapping) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{60} }

func (m *PortMapping) GetContainerPort() string {
	if m != nil {
		return m.ContainerPort
	}
	return ""
}

func (m *PortMapping) GetHostPort() string {
	if m != nil {
		return m.HostPort
	}
	return ""
}

func (m *PortMapping) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type PortmappingWhiteList struct {
	// allowed internal networks in CIDR format for portmapping
	// Those networks could visit all container ports if portmapping is enabled
	InternalNetworks []string `protobuf:"bytes,1,rep,name=internalNetworks" json:"internalNetworks,omitempty"`
	// allowed external networks in CIDR format for portmapping
	// Those networks could only visit exposed ports if portmapping is enabled
	ExternalNetworks []string `protobuf:"bytes,2,rep,name=externalNetworks" json:"externalNetworks,omitempty"`
}

func (m *PortmappingWhiteList) Reset()                    { *m = PortmappingWhiteList{} }
func (m *PortmappingWhiteList) String() string            { return proto.CompactTextString(m) }
func (*PortmappingWhiteList) ProtoMessage()               {}
func (*PortmappingWhiteList) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{61} }

func (m *PortmappingWhiteList) GetInternalNetworks() []string {
	if m != nil {
		return m.InternalNetworks
	}
	return nil
}

func (m *PortmappingWhiteList) GetExternalNetworks() []string {
	if m != nil {
		return m.ExternalNetworks
	}
	return nil
}

type UserPod struct {
	// TODO: rename this to name (renaming will also change restful API)
	Id                    string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Hostname              string                `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Type                  string                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	RestartPolicy         string                `protobuf:"bytes,4,opt,name=restartPolicy,proto3" json:"restartPolicy,omitempty"`
	Tty                   bool                  `protobuf:"varint,5,opt,name=tty,proto3" json:"tty,omitempty"`
	Labels                map[string]string     `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Resource              *UserResource         `protobuf:"bytes,7,opt,name=resource" json:"resource,omitempty"`
	Log                   *PodLogConfig         `protobuf:"bytes,8,opt,name=log" json:"log,omitempty"`
	Dns                   []string              `protobuf:"bytes,9,rep,name=dns" json:"dns,omitempty"`
	Containers            []*UserContainer      `protobuf:"bytes,10,rep,name=containers" json:"containers,omitempty"`
	Files                 []*UserFile           `protobuf:"bytes,11,rep,name=files" json:"files,omitempty"`
	Volumes               []*UserVolume         `protobuf:"bytes,12,rep,name=volumes" json:"volumes,omitempty"`
	Interfaces            []*UserInterface      `protobuf:"bytes,13,rep,name=interfaces" json:"interfaces,omitempty"`
	Services              []*UserService        `protobuf:"bytes,14,rep,name=services" json:"services,omitempty"`
	PortmappingWhiteLists *PortmappingWhiteList `protobuf:"bytes,15,opt,name=portmappingWhiteLists" json:"portmappingWhiteLists,omitempty"`
	Portmappings          []*PortMapping        `protobuf:"bytes,16,rep,name=portmappings" json:"portmappings,omitempty"`
	DnsOptions            []string              `protobuf:"bytes,17,rep,name=dnsOptions" json:"dnsOptions,omitempty"`
	DnsSearch             []string              `protobuf:"bytes,18,rep,name=dnsSearch" json:"dnsSearch,omitempty"`
}

func (m *UserPod) Reset()                    { *m = UserPod{} }
func (m *UserPod) String() string            { return proto.CompactTextString(m) }
func (*UserPod) ProtoMessage()               {}
func (*UserPod) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{62} }

func (m *UserPod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserPod) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *UserPod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UserPod) GetRestartPolicy() string {
	if m != nil {
		return m.RestartPolicy
	}
	return ""
}

func (m *UserPod) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *UserPod) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UserPod) GetResource() *UserResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *UserPod) GetLog() *PodLogConfig {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *UserPod) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *UserPod) GetContainers() []*UserContainer {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *UserPod) GetFiles() []*UserFile {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *UserPod) GetVolumes() []*UserVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *UserPod) GetInterfaces() []*UserInterface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *UserPod) GetServices() []*UserService {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *UserPod) GetPortmappingWhiteLists() *PortmappingWhiteList {
	if m != nil {
		return m.PortmappingWhiteLists
	}
	return nil
}

func (m *UserPod) GetPortmappings() []*PortMapping {
	if m != nil {
		return m.Portmappings
	}
	return nil
}

func (m *UserPod) GetDnsOptions() []string {
	if m != nil {
		return m.DnsOptions
	}
	return nil
}

func (m *UserPod) GetDnsSearch() []string {
	if m != nil {
		return m.DnsSearch
	}
	return nil
}

type PodCreateRequest struct {
	PodSpec *UserPod `protobuf:"bytes,1,opt,name=podSpec" json:"podSpec,omitempty"`
	PodID   string   `protobuf:"bytes,2,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodCreateRequest) Reset()                    { *m = PodCreateRequest{} }
func (m *PodCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*PodCreateRequest) ProtoMessage()               {}
func (*PodCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{63} }

func (m *PodCreateRequest) GetPodSpec() *UserPod {
	if m != nil {
		return m.PodSpec
	}
	return nil
}

func (m *PodCreateRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodCreateResponse struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodCreateResponse) Reset()                    { *m = PodCreateResponse{} }
func (m *PodCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*PodCreateResponse) ProtoMessage()               {}
func (*PodCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{64} }

func (m *PodCreateResponse) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodRemoveRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodRemoveRequest) Reset()                    { *m = PodRemoveRequest{} }
func (m *PodRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*PodRemoveRequest) ProtoMessage()               {}
func (*PodRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{65} }

func (m *PodRemoveRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodRemoveResponse struct {
	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Cause string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (m *PodRemoveResponse) Reset()                    { *m = PodRemoveResponse{} }
func (m *PodRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*PodRemoveResponse) ProtoMessage()               {}
func (*PodRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{66} }

func (m *PodRemoveResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PodRemoveResponse) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

type ContainerLogsRequest struct {
	Container  string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Follow     bool   `protobuf:"varint,2,opt,name=follow,proto3" json:"follow,omitempty"`
	Timestamps bool   `protobuf:"varint,3,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	Tail       string `protobuf:"bytes,4,opt,name=tail,proto3" json:"tail,omitempty"`
	Since      string `protobuf:"bytes,5,opt,name=since,proto3" json:"since,omitempty"`
	Stdout     bool   `protobuf:"varint,6,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     bool   `protobuf:"varint,7,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *ContainerLogsRequest) Reset()                    { *m = ContainerLogsRequest{} }
func (m *ContainerLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerLogsRequest) ProtoMessage()               {}
func (*ContainerLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{67} }

func (m *ContainerLogsRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *ContainerLogsRequest) GetFollow() bool {
	if m != nil {
		return m.Follow
	}
	return false
}

func (m *ContainerLogsRequest) GetTimestamps() bool {
	if m != nil {
		return m.Timestamps
	}
	return false
}

func (m *ContainerLogsRequest) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

func (m *ContainerLogsRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *ContainerLogsRequest) GetStdout() bool {
	if m != nil {
		return m.Stdout
	}
	return false
}

func (m *ContainerLogsRequest) GetStderr() bool {
	if m != nil {
		return m.Stderr
	}
	return false
}

type ContainerLogsResponse struct {
	Log []byte `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *ContainerLogsResponse) Reset()                    { *m = ContainerLogsResponse{} }
func (m *ContainerLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerLogsResponse) ProtoMessage()               {}
func (*ContainerLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{68} }

func (m *ContainerLogsResponse) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

type DriverStatus struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *DriverStatus) Reset()                    { *m = DriverStatus{} }
func (m *DriverStatus) String() string            { return proto.CompactTextString(m) }
func (*DriverStatus) ProtoMessage()               {}
func (*DriverStatus) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{69} }

func (m *DriverStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DriverStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type InfoRequest struct {
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{70} }

type InfoResponse struct {
	ID                 string          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Containers         int32           `protobuf:"varint,2,opt,name=containers,proto3" json:"containers,omitempty"`
	Images             int32           `protobuf:"varint,3,opt,name=images,proto3" json:"images,omitempty"`
	Driver             string          `protobuf:"bytes,4,opt,name=driver,proto3" json:"driver,omitempty"`
	Dstatus            []*DriverStatus `protobuf:"bytes,5,rep,name=dstatus" json:"dstatus,omitempty"`
	DockerRootDir      string          `protobuf:"bytes,6,opt,name=dockerRootDir,proto3" json:"dockerRootDir,omitempty"`
	IndexServerAddress string          `protobuf:"bytes,7,opt,name=indexServerAddress,proto3" json:"indexServerAddress,omitempty"`
	ExecutionDriver    string          `protobuf:"bytes,8,opt,name=executionDriver,proto3" json:"executionDriver,omitempty"`
	MemTotal           int64           `protobuf:"varint,9,opt,name=memTotal,proto3" json:"memTotal,omitempty"`
	Pods               int64           `protobuf:"varint,10,opt,name=pods,proto3" json:"pods,omitempty"`
	OperatingSystem    string          `protobuf:"bytes,11,opt,name=operatingSystem,proto3" json:"operatingSystem,omitempty"`
	Name               string          `protobuf:"bytes,12,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{71} }

func (m *InfoResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *InfoResponse) GetContainers() int32 {
	if m != nil {
		return m.Containers
	}
	return 0
}

func (m *InfoResponse) GetImages() int32 {
	if m != nil {
		return m.Images
	}
	return 0
}

func (m *InfoResponse) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *InfoResponse) GetDstatus() []*DriverStatus {
	if m != nil {
		return m.Dstatus
	}
	return nil
}

func (m *InfoResponse) GetDockerRootDir() string {
	if m != nil {
		return m.DockerRootDir
	}
	return ""
}

func (m *InfoResponse) GetIndexServerAddress() string {
	if m != nil {
		return m.IndexServerAddress
	}
	return ""
}

func (m *InfoResponse) GetExecutionDriver() string {
	if m != nil {
		return m.ExecutionDriver
	}
	return ""
}

func (m *InfoResponse) GetMemTotal() int64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *InfoResponse) GetPods() int64 {
	if m != nil {
		return m.Pods
	}
	return 0
}

func (m *InfoResponse) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *InfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ExecCreateRequest struct {
	ContainerID string   `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Command     []string `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
	Tty         bool     `protobuf:"varint,3,opt,name=tty,proto3" json:"tty,omitempty"`
}

func (m *ExecCreateRequest) Reset()                    { *m = ExecCreateRequest{} }
func (m *ExecCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecCreateRequest) ProtoMessage()               {}
func (*ExecCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{72} }

func (m *ExecCreateRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ExecCreateRequest) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ExecCreateRequest) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

type ExecCreateResponse struct {
	ExecID string `protobuf:"bytes,1,opt,name=execID,proto3" json:"execID,omitempty"`
}

func (m *ExecCreateResponse) Reset()                    { *m = ExecCreateResponse{} }
func (m *ExecCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecCreateResponse) ProtoMessage()               {}
func (*ExecCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{73} }

func (m *ExecCreateResponse) GetExecID() string {
	if m != nil {
		return m.ExecID
	}
	return ""
}

type ExecStartRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ExecID      string `protobuf:"bytes,2,opt,name=execID,proto3" json:"execID,omitempty"`
	Stdin       []byte `protobuf:"bytes,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
}

func (m *ExecStartRequest) Reset()                    { *m = ExecStartRequest{} }
func (m *ExecStartRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecStartRequest) ProtoMessage()               {}
func (*ExecStartRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{74} }

func (m *ExecStartRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ExecStartRequest) GetExecID() string {
	if m != nil {
		return m.ExecID
	}
	return ""
}

func (m *ExecStartRequest) GetStdin() []byte {
	if m != nil {
		return m.Stdin
	}
	return nil
}

type ExecStartResponse struct {
	Stdout []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
}

func (m *ExecStartResponse) Reset()                    { *m = ExecStartResponse{} }
func (m *ExecStartResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecStartResponse) ProtoMessage()               {}
func (*ExecStartResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{75} }

func (m *ExecStartResponse) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

type ExecVMRequest struct {
	PodID   string   `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Command []string `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
	Stdin   []byte   `protobuf:"bytes,3,opt,name=stdin,proto3" json:"stdin,omitempty"`
}

func (m *ExecVMRequest) Reset()                    { *m = ExecVMRequest{} }
func (m *ExecVMRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecVMRequest) ProtoMessage()               {}
func (*ExecVMRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{76} }

func (m *ExecVMRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ExecVMRequest) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *ExecVMRequest) GetStdin() []byte {
	if m != nil {
		return m.Stdin
	}
	return nil
}

type ExecVMResponse struct {
	Stdout   []byte `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	ExitCode int32  `protobuf:"varint,2,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
}

func (m *ExecVMResponse) Reset()                    { *m = ExecVMResponse{} }
func (m *ExecVMResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecVMResponse) ProtoMessage()               {}
func (*ExecVMResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{77} }

func (m *ExecVMResponse) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *ExecVMResponse) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type ExecSignalRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ExecID      string `protobuf:"bytes,2,opt,name=execID,proto3" json:"execID,omitempty"`
	Signal      int64  `protobuf:"varint,3,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (m *ExecSignalRequest) Reset()                    { *m = ExecSignalRequest{} }
func (m *ExecSignalRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecSignalRequest) ProtoMessage()               {}
func (*ExecSignalRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{78} }

func (m *ExecSignalRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ExecSignalRequest) GetExecID() string {
	if m != nil {
		return m.ExecID
	}
	return ""
}

func (m *ExecSignalRequest) GetSignal() int64 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type ExecSignalResponse struct {
}

func (m *ExecSignalResponse) Reset()                    { *m = ExecSignalResponse{} }
func (m *ExecSignalResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecSignalResponse) ProtoMessage()               {}
func (*ExecSignalResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{79} }

type PodStartRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodStartRequest) Reset()                    { *m = PodStartRequest{} }
func (m *PodStartRequest) String() string            { return proto.CompactTextString(m) }
func (*PodStartRequest) ProtoMessage()               {}
func (*PodStartRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{80} }

func (m *PodStartRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodStartResponse struct {
}

func (m *PodStartResponse) Reset()                    { *m = PodStartResponse{} }
func (m *PodStartResponse) String() string            { return proto.CompactTextString(m) }
func (*PodStartResponse) ProtoMessage()               {}
func (*PodStartResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{81} }

type WaitRequest struct {
	Container string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	ProcessId string `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	NoHang    bool   `protobuf:"varint,3,opt,name=noHang,proto3" json:"noHang,omitempty"`
}

func (m *WaitRequest) Reset()                    { *m = WaitRequest{} }
func (m *WaitRequest) String() string            { return proto.CompactTextString(m) }
func (*WaitRequest) ProtoMessage()               {}
func (*WaitRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{82} }

func (m *WaitRequest) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *WaitRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *WaitRequest) GetNoHang() bool {
	if m != nil {
		return m.NoHang
	}
	return false
}

type WaitResponse struct {
	ExitCode int32 `protobuf:"varint,1,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
}

func (m *WaitResponse) Reset()                    { *m = WaitResponse{} }
func (m *WaitResponse) String() string            { return proto.CompactTextString(m) }
func (*WaitResponse) ProtoMessage()               {}
func (*WaitResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{83} }

func (m *WaitResponse) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type AttachMessage struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AttachMessage) Reset()                    { *m = AttachMessage{} }
func (m *AttachMessage) String() string            { return proto.CompactTextString(m) }
func (*AttachMessage) ProtoMessage()               {}
func (*AttachMessage) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{84} }

func (m *AttachMessage) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *AttachMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ContainerCreateRequest struct {
	ContainerSpec *UserContainer `protobuf:"bytes,1,opt,name=containerSpec" json:"containerSpec,omitempty"`
	PodID         string         `protobuf:"bytes,2,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *ContainerCreateRequest) Reset()                    { *m = ContainerCreateRequest{} }
func (m *ContainerCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerCreateRequest) ProtoMessage()               {}
func (*ContainerCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{85} }

func (m *ContainerCreateRequest) GetContainerSpec() *UserContainer {
	if m != nil {
		return m.ContainerSpec
	}
	return nil
}

func (m *ContainerCreateRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type ContainerCreateResponse struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
}

func (m *ContainerCreateResponse) Reset()                    { *m = ContainerCreateResponse{} }
func (m *ContainerCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerCreateResponse) ProtoMessage()               {}
func (*ContainerCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{86} }

func (m *ContainerCreateResponse) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

type ContainerStartRequest struct {
	// ID of the container to start.
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (m *ContainerStartRequest) Reset()                    { *m = ContainerStartRequest{} }
func (m *ContainerStartRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerStartRequest) ProtoMessage()               {}
func (*ContainerStartRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{87} }

func (m *ContainerStartRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type ContainerStartResponse struct {
}

func (m *ContainerStartResponse) Reset()                    { *m = ContainerStartResponse{} }
func (m *ContainerStartResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerStartResponse) ProtoMessage()               {}
func (*ContainerStartResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{88} }

type ContainerRenameRequest struct {
	OldContainerName string `protobuf:"bytes,1,opt,name=oldContainerName,proto3" json:"oldContainerName,omitempty"`
	NewContainerName string `protobuf:"bytes,2,opt,name=newContainerName,proto3" json:"newContainerName,omitempty"`
}

func (m *ContainerRenameRequest) Reset()                    { *m = ContainerRenameRequest{} }
func (m *ContainerRenameRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerRenameRequest) ProtoMessage()               {}
func (*ContainerRenameRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{89} }

func (m *ContainerRenameRequest) GetOldContainerName() string {
	if m != nil {
		return m.OldContainerName
	}
	return ""
}

func (m *ContainerRenameRequest) GetNewContainerName() string {
	if m != nil {
		return m.NewContainerName
	}
	return ""
}

type ContainerRenameResponse struct {
}

func (m *ContainerRenameResponse) Reset()                    { *m = ContainerRenameResponse{} }
func (m *ContainerRenameResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerRenameResponse) ProtoMessage()               {}
func (*ContainerRenameResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{90} }

type ContainerRemoveRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (m *ContainerRemoveRequest) Reset()                    { *m = ContainerRemoveRequest{} }
func (m *ContainerRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerRemoveRequest) ProtoMessage()               {}
func (*ContainerRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{91} }

func (m *ContainerRemoveRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type ContainerRemoveResponse struct {
}

func (m *ContainerRemoveResponse) Reset()                    { *m = ContainerRemoveResponse{} }
func (m *ContainerRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerRemoveResponse) ProtoMessage()               {}
func (*ContainerRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{92} }

type AuthConfig struct {
	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Auth          string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	Email         string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Serveraddress string `protobuf:"bytes,5,opt,name=serveraddress,proto3" json:"serveraddress,omitempty"`
	Registrytoken string `protobuf:"bytes,6,opt,name=registrytoken,proto3" json:"registrytoken,omitempty"`
}

func (m *AuthConfig) Reset()                    { *m = AuthConfig{} }
func (m *AuthConfig) String() string            { return proto.CompactTextString(m) }
func (*AuthConfig) ProtoMessage()               {}
func (*AuthConfig) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{93} }

func (m *AuthConfig) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthConfig) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *AuthConfig) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AuthConfig) GetServeraddress() string {
	if m != nil {
		return m.Serveraddress
	}
	return ""
}

func (m *AuthConfig) GetRegistrytoken() string {
	if m != nil {
		return m.Registrytoken
	}
	return ""
}

type ImagePullRequest struct {
	Image string      `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Tag   string      `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Auth  *AuthConfig `protobuf:"bytes,3,opt,name=auth" json:"auth,omitempty"`
}

func (m *ImagePullRequest) Reset()                    { *m = ImagePullRequest{} }
func (m *ImagePullRequest) String() string            { return proto.CompactTextString(m) }
func (*ImagePullRequest) ProtoMessage()               {}
func (*ImagePullRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{94} }

func (m *ImagePullRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ImagePullRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ImagePullRequest) GetAuth() *AuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

type ImagePullResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ImagePullResponse) Reset()                    { *m = ImagePullResponse{} }
func (m *ImagePullResponse) String() string            { return proto.CompactTextString(m) }
func (*ImagePullResponse) ProtoMessage()               {}
func (*ImagePullResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{95} }

func (m *ImagePullResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ImagePushRequest struct {
	Repo string      `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Tag  string      `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Auth *AuthConfig `protobuf:"bytes,3,opt,name=auth" json:"auth,omitempty"`
}

func (m *ImagePushRequest) Reset()                    { *m = ImagePushRequest{} }
func (m *ImagePushRequest) String() string            { return proto.CompactTextString(m) }
func (*ImagePushRequest) ProtoMessage()               {}
func (*ImagePushRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{96} }

func (m *ImagePushRequest) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *ImagePushRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ImagePushRequest) GetAuth() *AuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

type ImagePushResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ImagePushResponse) Reset()                    { *m = ImagePushResponse{} }
func (m *ImagePushResponse) String() string            { return proto.CompactTextString(m) }
func (*ImagePushResponse) ProtoMessage()               {}
func (*ImagePushResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{97} }

func (m *ImagePushResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ImageRemoveRequest struct {
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Force bool   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Prune bool   `protobuf:"varint,3,opt,name=prune,proto3" json:"prune,omitempty"`
}

func (m *ImageRemoveRequest) Reset()                    { *m = ImageRemoveRequest{} }
func (m *ImageRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageRemoveRequest) ProtoMessage()               {}
func (*ImageRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{98} }

func (m *ImageRemoveRequest) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ImageRemoveRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ImageRemoveRequest) GetPrune() bool {
	if m != nil {
		return m.Prune
	}
	return false
}

type ImageDelete struct {
	Untaged string `protobuf:"bytes,1,opt,name=untaged,proto3" json:"untaged,omitempty"`
	Deleted string `protobuf:"bytes,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (m *ImageDelete) Reset()                    { *m = ImageDelete{} }
func (m *ImageDelete) String() string            { return proto.CompactTextString(m) }
func (*ImageDelete) ProtoMessage()               {}
func (*ImageDelete) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{99} }

func (m *ImageDelete) GetUntaged() string {
	if m != nil {
		return m.Untaged
	}
	return ""
}

func (m *ImageDelete) GetDeleted() string {
	if m != nil {
		return m.Deleted
	}
	return ""
}

type ImageRemoveResponse struct {
	Images []*ImageDelete `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (m *ImageRemoveResponse) Reset()                    { *m = ImageRemoveResponse{} }
func (m *ImageRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageRemoveResponse) ProtoMessage()               {}
func (*ImageRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{100} }

func (m *ImageRemoveResponse) GetImages() []*ImageDelete {
	if m != nil {
		return m.Images
	}
	return nil
}

type ContainerStopRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Timeout     int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *ContainerStopRequest) Reset()                    { *m = ContainerStopRequest{} }
func (m *ContainerStopRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerStopRequest) ProtoMessage()               {}
func (*ContainerStopRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{101} }

func (m *ContainerStopRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ContainerStopRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ContainerStopResponse struct {
}

func (m *ContainerStopResponse) Reset()                    { *m = ContainerStopResponse{} }
func (m *ContainerStopResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerStopResponse) ProtoMessage()               {}
func (*ContainerStopResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{102} }

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{103} }

type VersionResponse struct {
	// Version is the version of hyperd
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// ApiVersion is the version of gRPC API
	ApiVersion string `protobuf:"bytes,2,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{104} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionResponse) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

type ServiceListResponse struct {
	Services []*UserService `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceListResponse) Reset()                    { *m = ServiceListResponse{} }
func (m *ServiceListResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceListResponse) ProtoMessage()               {}
func (*ServiceListResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{105} }

func (m *ServiceListResponse) GetServices() []*UserService {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServiceListRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *ServiceListRequest) Reset()                    { *m = ServiceListRequest{} }
func (m *ServiceListRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceListRequest) ProtoMessage()               {}
func (*ServiceListRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{106} }

func (m *ServiceListRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type ServiceAddRequest struct {
	PodID    string         `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Services []*UserService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceAddRequest) Reset()                    { *m = ServiceAddRequest{} }
func (m *ServiceAddRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceAddRequest) ProtoMessage()               {}
func (*ServiceAddRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{107} }

func (m *ServiceAddRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ServiceAddRequest) GetServices() []*UserService {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServiceAddResponse struct {
}

func (m *ServiceAddResponse) Reset()                    { *m = ServiceAddResponse{} }
func (m *ServiceAddResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceAddResponse) ProtoMessage()               {}
func (*ServiceAddResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{108} }

type ServiceDelRequest struct {
	PodID    string         `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Services []*UserService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceDelRequest) Reset()                    { *m = ServiceDelRequest{} }
func (m *ServiceDelRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceDelRequest) ProtoMessage()               {}
func (*ServiceDelRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{109} }

func (m *ServiceDelRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ServiceDelRequest) GetServices() []*UserService {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServiceDelResponse struct {
}

func (m *ServiceDelResponse) Reset()                    { *m = ServiceDelResponse{} }
func (m *ServiceDelResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceDelResponse) ProtoMessage()               {}
func (*ServiceDelResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{110} }

type ServiceUpdateRequest struct {
	PodID    string         `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Services []*UserService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *ServiceUpdateRequest) Reset()                    { *m = ServiceUpdateRequest{} }
func (m *ServiceUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceUpdateRequest) ProtoMessage()               {}
func (*ServiceUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{111} }

func (m *ServiceUpdateRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ServiceUpdateRequest) GetServices() []*UserService {
	if m != nil {
		return m.Services
	}
	return nil
}

type ServiceUpdateResponse struct {
}

func (m *ServiceUpdateResponse) Reset()                    { *m = ServiceUpdateResponse{} }
func (m *ServiceUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceUpdateResponse) ProtoMessage()               {}
func (*ServiceUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{112} }

type PodStopRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodStopRequest) Reset()                    { *m = PodStopRequest{} }
func (m *PodStopRequest) String() string            { return proto.CompactTextString(m) }
func (*PodStopRequest) ProtoMessage()               {}
func (*PodStopRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{113} }

func (m *PodStopRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodStopResponse struct {
	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Cause string `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (m *PodStopResponse) Reset()                    { *m = PodStopResponse{} }
func (m *PodStopResponse) String() string            { return proto.CompactTextString(m) }
func (*PodStopResponse) ProtoMessage()               {}
func (*PodStopResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{114} }

func (m *PodStopResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PodStopResponse) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

type PodSignalRequest struct {
	PodID  string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Signal int64  `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (m *PodSignalRequest) Reset()                    { *m = PodSignalRequest{} }
func (m *PodSignalRequest) String() string            { return proto.CompactTextString(m) }
func (*PodSignalRequest) ProtoMessage()               {}
func (*PodSignalRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{115} }

func (m *PodSignalRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *PodSignalRequest) GetSignal() int64 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type PodSignalResponse struct {
}

func (m *PodSignalResponse) Reset()                    { *m = PodSignalResponse{} }
func (m *PodSignalResponse) String() string            { return proto.CompactTextString(m) }
func (*PodSignalResponse) ProtoMessage()               {}
func (*PodSignalResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{116} }

type PodPauseRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodPauseRequest) Reset()                    { *m = PodPauseRequest{} }
func (m *PodPauseRequest) String() string            { return proto.CompactTextString(m) }
func (*PodPauseRequest) ProtoMessage()               {}
func (*PodPauseRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{117} }

func (m *PodPauseRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodPauseResponse struct {
}

func (m *PodPauseResponse) Reset()                    { *m = PodPauseResponse{} }
func (m *PodPauseResponse) String() string            { return proto.CompactTextString(m) }
func (*PodPauseResponse) ProtoMessage()               {}
func (*PodPauseResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{118} }

type PodUnpauseRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodUnpauseRequest) Reset()                    { *m = PodUnpauseRequest{} }
func (m *PodUnpauseRequest) String() string            { return proto.CompactTextString(m) }
func (*PodUnpauseRequest) ProtoMessage()               {}
func (*PodUnpauseRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{119} }

func (m *PodUnpauseRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodUnpauseResponse struct {
}

func (m *PodUnpauseResponse) Reset()                    { *m = PodUnpauseResponse{} }
func (m *PodUnpauseResponse) String() string            { return proto.CompactTextString(m) }
func (*PodUnpauseResponse) ProtoMessage()               {}
func (*PodUnpauseResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{120} }

type PodLabelsRequest struct {
	PodID    string            `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	Override bool              `protobuf:"varint,2,opt,name=override,proto3" json:"override,omitempty"`
	Labels   map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PodLabelsRequest) Reset()                    { *m = PodLabelsRequest{} }
func (m *PodLabelsRequest) String() string            { return proto.CompactTextString(m) }
func (*PodLabelsRequest) ProtoMessage()               {}
func (*PodLabelsRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{121} }

func (m *PodLabelsRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *PodLabelsRequest) GetOverride() bool {
	if m != nil {
		return m.Override
	}
	return false
}

func (m *PodLabelsRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PodLabelsResponse struct {
}

func (m *PodLabelsResponse) Reset()                    { *m = PodLabelsResponse{} }
func (m *PodLabelsResponse) String() string            { return proto.CompactTextString(m) }
func (*PodLabelsResponse) ProtoMessage()               {}
func (*PodLabelsResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{122} }

type PodStatsRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
}

func (m *PodStatsRequest) Reset()                    { *m = PodStatsRequest{} }
func (m *PodStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*PodStatsRequest) ProtoMessage()               {}
func (*PodStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{123} }

func (m *PodStatsRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

type PodStatsResponse struct {
	PodStats *PodStats `protobuf:"bytes,1,opt,name=podStats" json:"podStats,omitempty"`
}

func (m *PodStatsResponse) Reset()                    { *m = PodStatsResponse{} }
func (m *PodStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*PodStatsResponse) ProtoMessage()               {}
func (*PodStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{124} }

func (m *PodStatsResponse) GetPodStats() *PodStats {
	if m != nil {
		return m.PodStats
	}
	return nil
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{125} }

type PingResponse struct {
	HyperdStats string `protobuf:"bytes,1,opt,name=hyperdStats,proto3" json:"hyperdStats,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{126} }

func (m *PingResponse) GetHyperdStats() string {
	if m != nil {
		return m.HyperdStats
	}
	return ""
}

type ContainerSignalRequest struct {
	PodID       string `protobuf:"bytes,1,opt,name=podID,proto3" json:"podID,omitempty"`
	ContainerID string `protobuf:"bytes,2,opt,name=containerID,proto3" json:"containerID,omitempty"`
	Signal      int64  `protobuf:"varint,3,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (m *ContainerSignalRequest) Reset()                    { *m = ContainerSignalRequest{} }
func (m *ContainerSignalRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerSignalRequest) ProtoMessage()               {}
func (*ContainerSignalRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{127} }

func (m *ContainerSignalRequest) GetPodID() string {
	if m != nil {
		return m.PodID
	}
	return ""
}

func (m *ContainerSignalRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *ContainerSignalRequest) GetSignal() int64 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type ContainerSignalResponse struct {
}

func (m *ContainerSignalResponse) Reset()                    { *m = ContainerSignalResponse{} }
func (m *ContainerSignalResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerSignalResponse) ProtoMessage()               {}
func (*ContainerSignalResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{128} }

type TTYResizeRequest struct {
	ContainerID string `protobuf:"bytes,1,opt,name=containerID,proto3" json:"containerID,omitempty"`
	ExecID      string `protobuf:"bytes,2,opt,name=execID,proto3" json:"execID,omitempty"`
	Width       int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height      int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *TTYResizeRequest) Reset()                    { *m = TTYResizeRequest{} }
func (m *TTYResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*TTYResizeRequest) ProtoMessage()               {}
func (*TTYResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{129} }

func (m *TTYResizeRequest) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *TTYResizeRequest) GetExecID() string {
	if m != nil {
		return m.ExecID
	}
	return ""
}

func (m *TTYResizeRequest) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *TTYResizeRequest) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type TTYResizeResponse struct {
}

func (m *TTYResizeResponse) Reset()                    { *m = TTYResizeResponse{} }
func (m *TTYResizeResponse) String() string            { return proto.CompactTextString(m) }
func (*TTYResizeResponse) ProtoMessage()               {}
func (*TTYResizeResponse) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{130} }

func init() {
	proto.RegisterType((*ContainerPort)(nil), "types.ContainerPort")
	proto.RegisterType((*EnvironmentVar)(nil), "types.EnvironmentVar")
	proto.RegisterType((*VolumeMount)(nil), "types.VolumeMount")
	proto.RegisterType((*WaitingStatus)(nil), "types.WaitingStatus")
	proto.RegisterType((*RunningStatus)(nil), "types.RunningStatus")
	proto.RegisterType((*TermStatus)(nil), "types.TermStatus")
	proto.RegisterType((*ContainerStatus)(nil), "types.ContainerStatus")
	proto.RegisterType((*ContainerInfo)(nil), "types.ContainerInfo")
	proto.RegisterType((*Container)(nil), "types.Container")
	proto.RegisterType((*RBDVolumeSource)(nil), "types.RBDVolumeSource")
	proto.RegisterType((*PodVolume)(nil), "types.PodVolume")
	proto.RegisterType((*PodSpec)(nil), "types.PodSpec")
	proto.RegisterType((*PodStatus)(nil), "types.PodStatus")
	proto.RegisterType((*PodInfo)(nil), "types.PodInfo")
	proto.RegisterType((*ImageInfo)(nil), "types.ImageInfo")
	proto.RegisterType((*PodStats)(nil), "types.PodStats")
	proto.RegisterType((*CpuStats)(nil), "types.CpuStats")
	proto.RegisterType((*CpuUsage)(nil), "types.CpuUsage")
	proto.RegisterType((*BlkioStats)(nil), "types.BlkioStats")
	proto.RegisterType((*BlkioStatEntry)(nil), "types.BlkioStatEntry")
	proto.RegisterType((*MemoryStats)(nil), "types.MemoryStats")
	proto.RegisterType((*MemoryStatsMemoryData)(nil), "types.MemoryStatsMemoryData")
	proto.RegisterType((*NetworkStats)(nil), "types.NetworkStats")
	proto.RegisterType((*TcpStat)(nil), "types.TcpStat")
	proto.RegisterType((*InterfaceStats)(nil), "types.InterfaceStats")
	proto.RegisterType((*FsStats)(nil), "types.FsStats")
	proto.RegisterType((*ContainersStats)(nil), "types.ContainersStats")
	proto.RegisterType((*PodInfoRequest)(nil), "types.PodInfoRequest")
	proto.RegisterType((*PodInfoResponse)(nil), "types.PodInfoResponse")
	proto.RegisterType((*PodListRequest)(nil), "types.PodListRequest")
	proto.RegisterType((*PodListResult)(nil), "types.PodListResult")
	proto.RegisterType((*PodListResponse)(nil), "types.PodListResponse")
	proto.RegisterType((*ContainerListRequest)(nil), "types.ContainerListRequest")
	proto.RegisterType((*ContainerListResult)(nil), "types.ContainerListResult")
	proto.RegisterType((*ContainerListResponse)(nil), "types.ContainerListResponse")
	proto.RegisterType((*ContainerInfoRequest)(nil), "types.ContainerInfoRequest")
	proto.RegisterType((*ContainerInfoResponse)(nil), "types.ContainerInfoResponse")
	proto.RegisterType((*VMListResult)(nil), "types.VMListResult")
	proto.RegisterType((*VMListRequest)(nil), "types.VMListRequest")
	proto.RegisterType((*VMListResponse)(nil), "types.VMListResponse")
	proto.RegisterType((*ImageListRequest)(nil), "types.ImageListRequest")
	proto.RegisterType((*ImageListResponse)(nil), "types.ImageListResponse")
	proto.RegisterType((*VMCreateRequest)(nil), "types.VMCreateRequest")
	proto.RegisterType((*VMCreateResponse)(nil), "types.VMCreateResponse")
	proto.RegisterType((*VMRemoveRequest)(nil), "types.VMRemoveRequest")
	proto.RegisterType((*VMRemoveResponse)(nil), "types.VMRemoveResponse")
	proto.RegisterType((*UserContainerPort)(nil), "types.UserContainerPort")
	proto.RegisterType((*UserVolumeReference)(nil), "types.UserVolumeReference")
	proto.RegisterType((*UserFileReference)(nil), "types.UserFileReference")
	proto.RegisterType((*UserUser)(nil), "types.UserUser")
	proto.RegisterType((*Ulimit)(nil), "types.Ulimit")
	proto.RegisterType((*UserContainer)(nil), "types.UserContainer")
	proto.RegisterType((*UserResource)(nil), "types.UserResource")
	proto.RegisterType((*UserFile)(nil), "types.UserFile")
	proto.RegisterType((*UserVolumeOption)(nil), "types.UserVolumeOption")
	proto.RegisterType((*UserVolume)(nil), "types.UserVolume")
	proto.RegisterType((*UserInterface)(nil), "types.UserInterface")
	proto.RegisterType((*UserServiceBackend)(nil), "types.UserServiceBackend")
	proto.RegisterType((*UserService)(nil), "types.UserService")
	proto.RegisterType((*PodLogConfig)(nil), "types.PodLogConfig")
	proto.RegisterType((*PortMapping)(nil), "types.PortMapping")
	proto.RegisterType((*PortmappingWhiteList)(nil), "types.PortmappingWhiteList")
	proto.RegisterType((*UserPod)(nil), "types.UserPod")
	proto.RegisterType((*PodCreateRequest)(nil), "types.PodCreateRequest")
	proto.RegisterType((*PodCreateResponse)(nil), "types.PodCreateResponse")
	proto.RegisterType((*PodRemoveRequest)(nil), "types.PodRemoveRequest")
	proto.RegisterType((*PodRemoveResponse)(nil), "types.PodRemoveResponse")
	proto.RegisterType((*ContainerLogsRequest)(nil), "types.ContainerLogsRequest")
	proto.RegisterType((*ContainerLogsResponse)(nil), "types.ContainerLogsResponse")
	proto.RegisterType((*DriverStatus)(nil), "types.DriverStatus")
	proto.RegisterType((*InfoRequest)(nil), "types.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "types.InfoResponse")
	proto.RegisterType((*ExecCreateRequest)(nil), "types.ExecCreateRequest")
	proto.RegisterType((*ExecCreateResponse)(nil), "types.ExecCreateResponse")
	proto.RegisterType((*ExecStartRequest)(nil), "types.ExecStartRequest")
	proto.RegisterType((*ExecStartResponse)(nil), "types.ExecStartResponse")
	proto.RegisterType((*ExecVMRequest)(nil), "types.ExecVMRequest")
	proto.RegisterType((*ExecVMResponse)(nil), "types.ExecVMResponse")
	proto.RegisterType((*ExecSignalRequest)(nil), "types.ExecSignalRequest")
	proto.RegisterType((*ExecSignalResponse)(nil), "types.ExecSignalResponse")
	proto.RegisterType((*PodStartRequest)(nil), "types.PodStartRequest")
	proto.RegisterType((*PodStartResponse)(nil), "types.PodStartResponse")
	proto.RegisterType((*WaitRequest)(nil), "types.WaitRequest")
	proto.RegisterType((*WaitResponse)(nil), "types.WaitResponse")
	proto.RegisterType((*AttachMessage)(nil), "types.AttachMessage")
	proto.RegisterType((*ContainerCreateRequest)(nil), "types.ContainerCreateRequest")
	proto.RegisterType((*ContainerCreateResponse)(nil), "types.ContainerCreateResponse")
	proto.RegisterType((*ContainerStartRequest)(nil), "types.ContainerStartRequest")
	proto.RegisterType((*ContainerStartResponse)(nil), "types.ContainerStartResponse")
	proto.RegisterType((*ContainerRenameRequest)(nil), "types.ContainerRenameRequest")
	proto.RegisterType((*ContainerRenameResponse)(nil), "types.ContainerRenameResponse")
	proto.RegisterType((*ContainerRemoveRequest)(nil), "types.ContainerRemoveRequest")
	proto.RegisterType((*ContainerRemoveResponse)(nil), "types.ContainerRemoveResponse")
	proto.RegisterType((*AuthConfig)(nil), "types.AuthConfig")
	proto.RegisterType((*ImagePullRequest)(nil), "types.ImagePullRequest")
	proto.RegisterType((*ImagePullResponse)(nil), "types.ImagePullResponse")
	proto.RegisterType((*ImagePushRequest)(nil), "types.ImagePushRequest")
	proto.RegisterType((*ImagePushResponse)(nil), "types.ImagePushResponse")
	proto.RegisterType((*ImageRemoveRequest)(nil), "types.ImageRemoveRequest")
	proto.RegisterType((*ImageDelete)(nil), "types.ImageDelete")
	proto.RegisterType((*ImageRemoveResponse)(nil), "types.ImageRemoveResponse")
	proto.RegisterType((*ContainerStopRequest)(nil), "types.ContainerStopRequest")
	proto.RegisterType((*ContainerStopResponse)(nil), "types.ContainerStopResponse")
	proto.RegisterType((*VersionRequest)(nil), "types.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "types.VersionResponse")
	proto.RegisterType((*ServiceListResponse)(nil), "types.ServiceListResponse")
	proto.RegisterType((*ServiceListRequest)(nil), "types.ServiceListRequest")
	proto.RegisterType((*ServiceAddRequest)(nil), "types.ServiceAddRequest")
	proto.RegisterType((*ServiceAddResponse)(nil), "types.ServiceAddResponse")
	proto.RegisterType((*ServiceDelRequest)(nil), "types.ServiceDelRequest")
	proto.RegisterType((*ServiceDelResponse)(nil), "types.ServiceDelResponse")
	proto.RegisterType((*ServiceUpdateRequest)(nil), "types.ServiceUpdateRequest")
	proto.RegisterType((*ServiceUpdateResponse)(nil), "types.ServiceUpdateResponse")
	proto.RegisterType((*PodStopRequest)(nil), "types.PodStopRequest")
	proto.RegisterType((*PodStopResponse)(nil), "types.PodStopResponse")
	proto.RegisterType((*PodSignalRequest)(nil), "types.PodSignalRequest")
	proto.RegisterType((*PodSignalResponse)(nil), "types.PodSignalResponse")
	proto.RegisterType((*PodPauseRequest)(nil), "types.PodPauseRequest")
	proto.RegisterType((*PodPauseResponse)(nil), "types.PodPauseResponse")
	proto.RegisterType((*PodUnpauseRequest)(nil), "types.PodUnpauseRequest")
	proto.RegisterType((*PodUnpauseResponse)(nil), "types.PodUnpauseResponse")
	proto.RegisterType((*PodLabelsRequest)(nil), "types.PodLabelsRequest")
	proto.RegisterType((*PodLabelsResponse)(nil), "types.PodLabelsResponse")
	proto.RegisterType((*PodStatsRequest)(nil), "types.PodStatsRequest")
	proto.RegisterType((*PodStatsResponse)(nil), "types.PodStatsResponse")
	proto.RegisterType((*PingRequest)(nil), "types.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "types.PingResponse")
	proto.RegisterType((*ContainerSignalRequest)(nil), "types.ContainerSignalRequest")
	proto.RegisterType((*ContainerSignalResponse)(nil), "types.ContainerSignalResponse")
	proto.RegisterType((*TTYResizeRequest)(nil), "types.TTYResizeRequest")
	proto.RegisterType((*TTYResizeResponse)(nil), "types.TTYResizeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PublicAPI service

type PublicAPIClient interface {
	// PodList gets a list of pods
	PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*PodListResponse, error)
	// PodCreate creates a pod according to UserPod
	PodCreate(ctx context.Context, in *PodCreateRequest, opts ...grpc.CallOption) (*PodCreateResponse, error)
	// PodInfo gets pod's info by podID
	PodInfo(ctx context.Context, in *PodInfoRequest, opts ...grpc.CallOption) (*PodInfoResponse, error)
	// PodRemove deletes a pod by podID
	PodRemove(ctx context.Context, in *PodRemoveRequest, opts ...grpc.CallOption) (*PodRemoveResponse, error)
	// PodStart starts a pod
	PodStart(ctx context.Context, in *PodStartRequest, opts ...grpc.CallOption) (*PodStartResponse, error)
	// PodStop stops a pod
	PodStop(ctx context.Context, in *PodStopRequest, opts ...grpc.CallOption) (*PodStopResponse, error)
	// PodSignal sends a signal to all containers of specified pod
	PodSignal(ctx context.Context, in *PodSignalRequest, opts ...grpc.CallOption) (*PodSignalResponse, error)
	// PodPause pauses a pod
	PodPause(ctx context.Context, in *PodPauseRequest, opts ...grpc.CallOption) (*PodPauseResponse, error)
	// PodUnpause unpauses a pod
	PodUnpause(ctx context.Context, in *PodUnpauseRequest, opts ...grpc.CallOption) (*PodUnpauseResponse, error)
	// ExecVM executes a command outside of any containers.
	ExecVM(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_ExecVMClient, error)
	// ContainerList gets a list of containers
	ContainerList(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error)
	// ContainerInfo gets container's info by container's id or name
	ContainerInfo(ctx context.Context, in *ContainerInfoRequest, opts ...grpc.CallOption) (*ContainerInfoResponse, error)
	// ImageList gets a list of images by filters
	ImageList(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error)
	// VMList gets a list of HyperVMs
	VMList(ctx context.Context, in *VMListRequest, opts ...grpc.CallOption) (*VMListResponse, error)
	// SetPodLabels sets labels of given pod
	SetPodLabels(ctx context.Context, in *PodLabelsRequest, opts ...grpc.CallOption) (*PodLabelsResponse, error)
	// PodStats gets pod stats of a given pod
	PodStats(ctx context.Context, in *PodStatsRequest, opts ...grpc.CallOption) (*PodStatsResponse, error)
	// ContainerLogs gets the log of specified container
	ContainerLogs(ctx context.Context, in *ContainerLogsRequest, opts ...grpc.CallOption) (PublicAPI_ContainerLogsClient, error)
	// ContainerCreate creates a container in specified pod
	ContainerCreate(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateResponse, error)
	// ContainerStart starts a container in a specified pod
	ContainerStart(ctx context.Context, in *ContainerStartRequest, opts ...grpc.CallOption) (*ContainerStartResponse, error)
	// ContainerRename renames a container
	ContainerRename(ctx context.Context, in *ContainerRenameRequest, opts ...grpc.CallOption) (*ContainerRenameResponse, error)
	// TODO: ContainerCommit commits the changes of the specified container
	// ContainerSignal sends a signal to specified container
	ContainerSignal(ctx context.Context, in *ContainerSignalRequest, opts ...grpc.CallOption) (*ContainerSignalResponse, error)
	// TODO: ContainerLabels updates labels of the specified container
	// ContainerStop stops the specified container
	ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*ContainerStopResponse, error)
	// ContainerRemove removes a container from a specified pod
	ContainerRemove(ctx context.Context, in *ContainerRemoveRequest, opts ...grpc.CallOption) (*ContainerRemoveResponse, error)
	// ExecCreate creates exec in specified container
	ExecCreate(ctx context.Context, in *ExecCreateRequest, opts ...grpc.CallOption) (*ExecCreateResponse, error)
	// ExecStart starts exec
	ExecStart(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_ExecStartClient, error)
	// ExecSignal sends a signal to specified exec in specified container
	ExecSignal(ctx context.Context, in *ExecSignalRequest, opts ...grpc.CallOption) (*ExecSignalResponse, error)
	// Attach attaches to the specified container
	Attach(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_AttachClient, error)
	// Wait gets the exit code of the specified container
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*WaitResponse, error)
	// TTYResize resizes the tty of the specified container
	TTYResize(ctx context.Context, in *TTYResizeRequest, opts ...grpc.CallOption) (*TTYResizeResponse, error)
	// ServiceList gets a list of services
	ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error)
	// ServiceAdd add a service to a pod
	ServiceAdd(ctx context.Context, in *ServiceAddRequest, opts ...grpc.CallOption) (*ServiceAddResponse, error)
	// ServiceDelete delete a service from a pod
	ServiceDelete(ctx context.Context, in *ServiceDelRequest, opts ...grpc.CallOption) (*ServiceDelResponse, error)
	// ServiceUpdate updates an existing service of a pod
	ServiceUpdate(ctx context.Context, in *ServiceUpdateRequest, opts ...grpc.CallOption) (*ServiceUpdateResponse, error)
	// ImagePull pulls a image from registry
	ImagePull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (PublicAPI_ImagePullClient, error)
	// ImagePush pushes a local image to registry
	ImagePush(ctx context.Context, in *ImagePushRequest, opts ...grpc.CallOption) (PublicAPI_ImagePushClient, error)
	// ImageRemove deletes a image from hyperd
	ImageRemove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*ImageRemoveResponse, error)
	// Ping checks if hyperd is running (returns 'OK' on success)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Info gets the info of hyperd
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Version gets the version and apiVersion of hyperd
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type publicAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicAPIClient(cc *grpc.ClientConn) PublicAPIClient {
	return &publicAPIClient{cc}
}

func (c *publicAPIClient) PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*PodListResponse, error) {
	out := new(PodListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodCreate(ctx context.Context, in *PodCreateRequest, opts ...grpc.CallOption) (*PodCreateResponse, error) {
	out := new(PodCreateResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodInfo(ctx context.Context, in *PodInfoRequest, opts ...grpc.CallOption) (*PodInfoResponse, error) {
	out := new(PodInfoResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodRemove(ctx context.Context, in *PodRemoveRequest, opts ...grpc.CallOption) (*PodRemoveResponse, error) {
	out := new(PodRemoveResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodStart(ctx context.Context, in *PodStartRequest, opts ...grpc.CallOption) (*PodStartResponse, error) {
	out := new(PodStartResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodStop(ctx context.Context, in *PodStopRequest, opts ...grpc.CallOption) (*PodStopResponse, error) {
	out := new(PodStopResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodSignal(ctx context.Context, in *PodSignalRequest, opts ...grpc.CallOption) (*PodSignalResponse, error) {
	out := new(PodSignalResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodSignal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodPause(ctx context.Context, in *PodPauseRequest, opts ...grpc.CallOption) (*PodPauseResponse, error) {
	out := new(PodPauseResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodPause", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodUnpause(ctx context.Context, in *PodUnpauseRequest, opts ...grpc.CallOption) (*PodUnpauseResponse, error) {
	out := new(PodUnpauseResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodUnpause", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ExecVM(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_ExecVMClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[0], c.cc, "/types.PublicAPI/ExecVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIExecVMClient{stream}
	return x, nil
}

type PublicAPI_ExecVMClient interface {
	Send(*ExecVMRequest) error
	Recv() (*ExecVMResponse, error)
	grpc.ClientStream
}

type publicAPIExecVMClient struct {
	grpc.ClientStream
}

func (x *publicAPIExecVMClient) Send(m *ExecVMRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicAPIExecVMClient) Recv() (*ExecVMResponse, error) {
	m := new(ExecVMResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicAPIClient) ContainerList(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error) {
	out := new(ContainerListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerInfo(ctx context.Context, in *ContainerInfoRequest, opts ...grpc.CallOption) (*ContainerInfoResponse, error) {
	out := new(ContainerInfoResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ImageList(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ImageList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) VMList(ctx context.Context, in *VMListRequest, opts ...grpc.CallOption) (*VMListResponse, error) {
	out := new(VMListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/VMList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) SetPodLabels(ctx context.Context, in *PodLabelsRequest, opts ...grpc.CallOption) (*PodLabelsResponse, error) {
	out := new(PodLabelsResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/SetPodLabels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodStats(ctx context.Context, in *PodStatsRequest, opts ...grpc.CallOption) (*PodStatsResponse, error) {
	out := new(PodStatsResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerLogs(ctx context.Context, in *ContainerLogsRequest, opts ...grpc.CallOption) (PublicAPI_ContainerLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[1], c.cc, "/types.PublicAPI/ContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicAPI_ContainerLogsClient interface {
	Recv() (*ContainerLogsResponse, error)
	grpc.ClientStream
}

type publicAPIContainerLogsClient struct {
	grpc.ClientStream
}

func (x *publicAPIContainerLogsClient) Recv() (*ContainerLogsResponse, error) {
	m := new(ContainerLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicAPIClient) ContainerCreate(ctx context.Context, in *ContainerCreateRequest, opts ...grpc.CallOption) (*ContainerCreateResponse, error) {
	out := new(ContainerCreateResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerStart(ctx context.Context, in *ContainerStartRequest, opts ...grpc.CallOption) (*ContainerStartResponse, error) {
	out := new(ContainerStartResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerRename(ctx context.Context, in *ContainerRenameRequest, opts ...grpc.CallOption) (*ContainerRenameResponse, error) {
	out := new(ContainerRenameResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerRename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerSignal(ctx context.Context, in *ContainerSignalRequest, opts ...grpc.CallOption) (*ContainerSignalResponse, error) {
	out := new(ContainerSignalResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerSignal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerStop(ctx context.Context, in *ContainerStopRequest, opts ...grpc.CallOption) (*ContainerStopResponse, error) {
	out := new(ContainerStopResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerRemove(ctx context.Context, in *ContainerRemoveRequest, opts ...grpc.CallOption) (*ContainerRemoveResponse, error) {
	out := new(ContainerRemoveResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ExecCreate(ctx context.Context, in *ExecCreateRequest, opts ...grpc.CallOption) (*ExecCreateResponse, error) {
	out := new(ExecCreateResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ExecCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ExecStart(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_ExecStartClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[2], c.cc, "/types.PublicAPI/ExecStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIExecStartClient{stream}
	return x, nil
}

type PublicAPI_ExecStartClient interface {
	Send(*ExecStartRequest) error
	Recv() (*ExecStartResponse, error)
	grpc.ClientStream
}

type publicAPIExecStartClient struct {
	grpc.ClientStream
}

func (x *publicAPIExecStartClient) Send(m *ExecStartRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicAPIExecStartClient) Recv() (*ExecStartResponse, error) {
	m := new(ExecStartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicAPIClient) ExecSignal(ctx context.Context, in *ExecSignalRequest, opts ...grpc.CallOption) (*ExecSignalResponse, error) {
	out := new(ExecSignalResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ExecSignal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Attach(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_AttachClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[3], c.cc, "/types.PublicAPI/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIAttachClient{stream}
	return x, nil
}

type PublicAPI_AttachClient interface {
	Send(*AttachMessage) error
	Recv() (*AttachMessage, error)
	grpc.ClientStream
}

type publicAPIAttachClient struct {
	grpc.ClientStream
}

func (x *publicAPIAttachClient) Send(m *AttachMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicAPIAttachClient) Recv() (*AttachMessage, error) {
	m := new(AttachMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicAPIClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*WaitResponse, error) {
	out := new(WaitResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/Wait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) TTYResize(ctx context.Context, in *TTYResizeRequest, opts ...grpc.CallOption) (*TTYResizeResponse, error) {
	out := new(TTYResizeResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/TTYResize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ServiceList(ctx context.Context, in *ServiceListRequest, opts ...grpc.CallOption) (*ServiceListResponse, error) {
	out := new(ServiceListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ServiceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ServiceAdd(ctx context.Context, in *ServiceAddRequest, opts ...grpc.CallOption) (*ServiceAddResponse, error) {
	out := new(ServiceAddResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ServiceAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ServiceDelete(ctx context.Context, in *ServiceDelRequest, opts ...grpc.CallOption) (*ServiceDelResponse, error) {
	out := new(ServiceDelResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ServiceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ServiceUpdate(ctx context.Context, in *ServiceUpdateRequest, opts ...grpc.CallOption) (*ServiceUpdateResponse, error) {
	out := new(ServiceUpdateResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ServiceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ImagePull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (PublicAPI_ImagePullClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[4], c.cc, "/types.PublicAPI/ImagePull", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIImagePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicAPI_ImagePullClient interface {
	Recv() (*ImagePullResponse, error)
	grpc.ClientStream
}

type publicAPIImagePullClient struct {
	grpc.ClientStream
}

func (x *publicAPIImagePullClient) Recv() (*ImagePullResponse, error) {
	m := new(ImagePullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicAPIClient) ImagePush(ctx context.Context, in *ImagePushRequest, opts ...grpc.CallOption) (PublicAPI_ImagePushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[5], c.cc, "/types.PublicAPI/ImagePush", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIImagePushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PublicAPI_ImagePushClient interface {
	Recv() (*ImagePushResponse, error)
	grpc.ClientStream
}

type publicAPIImagePushClient struct {
	grpc.ClientStream
}

func (x *publicAPIImagePushClient) Recv() (*ImagePushResponse, error) {
	m := new(ImagePushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicAPIClient) ImageRemove(ctx context.Context, in *ImageRemoveRequest, opts ...grpc.CallOption) (*ImageRemoveResponse, error) {
	out := new(ImageRemoveResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ImageRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PublicAPI service

type PublicAPIServer interface {
	// PodList gets a list of pods
	PodList(context.Context, *PodListRequest) (*PodListResponse, error)
	// PodCreate creates a pod according to UserPod
	PodCreate(context.Context, *PodCreateRequest) (*PodCreateResponse, error)
	// PodInfo gets pod's info by podID
	PodInfo(context.Context, *PodInfoRequest) (*PodInfoResponse, error)
	// PodRemove deletes a pod by podID
	PodRemove(context.Context, *PodRemoveRequest) (*PodRemoveResponse, error)
	// PodStart starts a pod
	PodStart(context.Context, *PodStartRequest) (*PodStartResponse, error)
	// PodStop stops a pod
	PodStop(context.Context, *PodStopRequest) (*PodStopResponse, error)
	// PodSignal sends a signal to all containers of specified pod
	PodSignal(context.Context, *PodSignalRequest) (*PodSignalResponse, error)
	// PodPause pauses a pod
	PodPause(context.Context, *PodPauseRequest) (*PodPauseResponse, error)
	// PodUnpause unpauses a pod
	PodUnpause(context.Context, *PodUnpauseRequest) (*PodUnpauseResponse, error)
	// ExecVM executes a command outside of any containers.
	ExecVM(PublicAPI_ExecVMServer) error
	// ContainerList gets a list of containers
	ContainerList(context.Context, *ContainerListRequest) (*ContainerListResponse, error)
	// ContainerInfo gets container's info by container's id or name
	ContainerInfo(context.Context, *ContainerInfoRequest) (*ContainerInfoResponse, error)
	// ImageList gets a list of images by filters
	ImageList(context.Context, *ImageListRequest) (*ImageListResponse, error)
	// VMList gets a list of HyperVMs
	VMList(context.Context, *VMListRequest) (*VMListResponse, error)
	// SetPodLabels sets labels of given pod
	SetPodLabels(context.Context, *PodLabelsRequest) (*PodLabelsResponse, error)
	// PodStats gets pod stats of a given pod
	PodStats(context.Context, *PodStatsRequest) (*PodStatsResponse, error)
	// ContainerLogs gets the log of specified container
	ContainerLogs(*ContainerLogsRequest, PublicAPI_ContainerLogsServer) error
	// ContainerCreate creates a container in specified pod
	ContainerCreate(context.Context, *ContainerCreateRequest) (*ContainerCreateResponse, error)
	// ContainerStart starts a container in a specified pod
	ContainerStart(context.Context, *ContainerStartRequest) (*ContainerStartResponse, error)
	// ContainerRename renames a container
	ContainerRename(context.Context, *ContainerRenameRequest) (*ContainerRenameResponse, error)
	// TODO: ContainerCommit commits the changes of the specified container
	// ContainerSignal sends a signal to specified container
	ContainerSignal(context.Context, *ContainerSignalRequest) (*ContainerSignalResponse, error)
	// TODO: ContainerLabels updates labels of the specified container
	// ContainerStop stops the specified container
	ContainerStop(context.Context, *ContainerStopRequest) (*ContainerStopResponse, error)
	// ContainerRemove removes a container from a specified pod
	ContainerRemove(context.Context, *ContainerRemoveRequest) (*ContainerRemoveResponse, error)
	// ExecCreate creates exec in specified container
	ExecCreate(context.Context, *ExecCreateRequest) (*ExecCreateResponse, error)
	// ExecStart starts exec
	ExecStart(PublicAPI_ExecStartServer) error
	// ExecSignal sends a signal to specified exec in specified container
	ExecSignal(context.Context, *ExecSignalRequest) (*ExecSignalResponse, error)
	// Attach attaches to the specified container
	Attach(PublicAPI_AttachServer) error
	// Wait gets the exit code of the specified container
	Wait(context.Context, *WaitRequest) (*WaitResponse, error)
	// TTYResize resizes the tty of the specified container
	TTYResize(context.Context, *TTYResizeRequest) (*TTYResizeResponse, error)
	// ServiceList gets a list of services
	ServiceList(context.Context, *ServiceListRequest) (*ServiceListResponse, error)
	// ServiceAdd add a service to a pod
	ServiceAdd(context.Context, *ServiceAddRequest) (*ServiceAddResponse, error)
	// ServiceDelete delete a service from a pod
	ServiceDelete(context.Context, *ServiceDelRequest) (*ServiceDelResponse, error)
	// ServiceUpdate updates an existing service of a pod
	ServiceUpdate(context.Context, *ServiceUpdateRequest) (*ServiceUpdateResponse, error)
	// ImagePull pulls a image from registry
	ImagePull(*ImagePullRequest, PublicAPI_ImagePullServer) error
	// ImagePush pushes a local image to registry
	ImagePush(*ImagePushRequest, PublicAPI_ImagePushServer) error
	// ImageRemove deletes a image from hyperd
	ImageRemove(context.Context, *ImageRemoveRequest) (*ImageRemoveResponse, error)
	// Ping checks if hyperd is running (returns 'OK' on success)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Info gets the info of hyperd
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Version gets the version and apiVersion of hyperd
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterPublicAPIServer(s *grpc.Server, srv PublicAPIServer) {
	s.RegisterService(&_PublicAPI_serviceDesc, srv)
}

func _PublicAPI_PodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodList(ctx, req.(*PodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodCreate(ctx, req.(*PodCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodInfo(ctx, req.(*PodInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodRemove(ctx, req.(*PodRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodStart(ctx, req.(*PodStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodStop(ctx, req.(*PodStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodSignal(ctx, req.(*PodSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodPauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodPause(ctx, req.(*PodPauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodUnpause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodUnpauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodUnpause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodUnpause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodUnpause(ctx, req.(*PodUnpauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ExecVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicAPIServer).ExecVM(&publicAPIExecVMServer{stream})
}

type PublicAPI_ExecVMServer interface {
	Send(*ExecVMResponse) error
	Recv() (*ExecVMRequest, error)
	grpc.ServerStream
}

type publicAPIExecVMServer struct {
	grpc.ServerStream
}

func (x *publicAPIExecVMServer) Send(m *ExecVMResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicAPIExecVMServer) Recv() (*ExecVMRequest, error) {
	m := new(ExecVMRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicAPI_ContainerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerList(ctx, req.(*ContainerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerInfo(ctx, req.(*ContainerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ImageList(ctx, req.(*ImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_VMList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).VMList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/VMList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).VMList(ctx, req.(*VMListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_SetPodLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).SetPodLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/SetPodLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).SetPodLabels(ctx, req.(*PodLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodStats(ctx, req.(*PodStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).ContainerLogs(m, &publicAPIContainerLogsServer{stream})
}

type PublicAPI_ContainerLogsServer interface {
	Send(*ContainerLogsResponse) error
	grpc.ServerStream
}

type publicAPIContainerLogsServer struct {
	grpc.ServerStream
}

func (x *publicAPIContainerLogsServer) Send(m *ContainerLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicAPI_ContainerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerCreate(ctx, req.(*ContainerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerStart(ctx, req.(*ContainerStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerRename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerRename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerRename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerRename(ctx, req.(*ContainerRenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerSignal(ctx, req.(*ContainerSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerStop(ctx, req.(*ContainerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerRemove(ctx, req.(*ContainerRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ExecCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ExecCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ExecCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ExecCreate(ctx, req.(*ExecCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ExecStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicAPIServer).ExecStart(&publicAPIExecStartServer{stream})
}

type PublicAPI_ExecStartServer interface {
	Send(*ExecStartResponse) error
	Recv() (*ExecStartRequest, error)
	grpc.ServerStream
}

type publicAPIExecStartServer struct {
	grpc.ServerStream
}

func (x *publicAPIExecStartServer) Send(m *ExecStartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicAPIExecStartServer) Recv() (*ExecStartRequest, error) {
	m := new(ExecStartRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicAPI_ExecSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ExecSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ExecSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ExecSignal(ctx, req.(*ExecSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicAPIServer).Attach(&publicAPIAttachServer{stream})
}

type PublicAPI_AttachServer interface {
	Send(*AttachMessage) error
	Recv() (*AttachMessage, error)
	grpc.ServerStream
}

type publicAPIAttachServer struct {
	grpc.ServerStream
}

func (x *publicAPIAttachServer) Send(m *AttachMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicAPIAttachServer) Recv() (*AttachMessage, error) {
	m := new(AttachMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PublicAPI_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_TTYResize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTYResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).TTYResize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/TTYResize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).TTYResize(ctx, req.(*TTYResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ServiceList(ctx, req.(*ServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ServiceAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ServiceAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ServiceAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ServiceAdd(ctx, req.(*ServiceAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ServiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ServiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ServiceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ServiceDelete(ctx, req.(*ServiceDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ServiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ServiceUpdate(ctx, req.(*ServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ImagePull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagePullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).ImagePull(m, &publicAPIImagePullServer{stream})
}

type PublicAPI_ImagePullServer interface {
	Send(*ImagePullResponse) error
	grpc.ServerStream
}

type publicAPIImagePullServer struct {
	grpc.ServerStream
}

func (x *publicAPIImagePullServer) Send(m *ImagePullResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicAPI_ImagePush_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagePushRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).ImagePush(m, &publicAPIImagePushServer{stream})
}

type PublicAPI_ImagePushServer interface {
	Send(*ImagePushResponse) error
	grpc.ServerStream
}

type publicAPIImagePushServer struct {
	grpc.ServerStream
}

func (x *publicAPIImagePushServer) Send(m *ImagePushResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PublicAPI_ImageRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ImageRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ImageRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ImageRemove(ctx, req.(*ImageRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.PublicAPI",
	HandlerType: (*PublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PodList",
			Handler:    _PublicAPI_PodList_Handler,
		},
		{
			MethodName: "PodCreate",
			Handler:    _PublicAPI_PodCreate_Handler,
		},
		{
			MethodName: "PodInfo",
			Handler:    _PublicAPI_PodInfo_Handler,
		},
		{
			MethodName: "PodRemove",
			Handler:    _PublicAPI_PodRemove_Handler,
		},
		{
			MethodName: "PodStart",
			Handler:    _PublicAPI_PodStart_Handler,
		},
		{
			MethodName: "PodStop",
			Handler:    _PublicAPI_PodStop_Handler,
		},
		{
			MethodName: "PodSignal",
			Handler:    _PublicAPI_PodSignal_Handler,
		},
		{
			MethodName: "PodPause",
			Handler:    _PublicAPI_PodPause_Handler,
		},
		{
			MethodName: "PodUnpause",
			Handler:    _PublicAPI_PodUnpause_Handler,
		},
		{
			MethodName: "ContainerList",
			Handler:    _PublicAPI_ContainerList_Handler,
		},
		{
			MethodName: "ContainerInfo",
			Handler:    _PublicAPI_ContainerInfo_Handler,
		},
		{
			MethodName: "ImageList",
			Handler:    _PublicAPI_ImageList_Handler,
		},
		{
			MethodName: "VMList",
			Handler:    _PublicAPI_VMList_Handler,
		},
		{
			MethodName: "SetPodLabels",
			Handler:    _PublicAPI_SetPodLabels_Handler,
		},
		{
			MethodName: "PodStats",
			Handler:    _PublicAPI_PodStats_Handler,
		},
		{
			MethodName: "ContainerCreate",
			Handler:    _PublicAPI_ContainerCreate_Handler,
		},
		{
			MethodName: "ContainerStart",
			Handler:    _PublicAPI_ContainerStart_Handler,
		},
		{
			MethodName: "ContainerRename",
			Handler:    _PublicAPI_ContainerRename_Handler,
		},
		{
			MethodName: "ContainerSignal",
			Handler:    _PublicAPI_ContainerSignal_Handler,
		},
		{
			MethodName: "ContainerStop",
			Handler:    _PublicAPI_ContainerStop_Handler,
		},
		{
			MethodName: "ContainerRemove",
			Handler:    _PublicAPI_ContainerRemove_Handler,
		},
		{
			MethodName: "ExecCreate",
			Handler:    _PublicAPI_ExecCreate_Handler,
		},
		{
			MethodName: "ExecSignal",
			Handler:    _PublicAPI_ExecSignal_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _PublicAPI_Wait_Handler,
		},
		{
			MethodName: "TTYResize",
			Handler:    _PublicAPI_TTYResize_Handler,
		},
		{
			MethodName: "ServiceList",
			Handler:    _PublicAPI_ServiceList_Handler,
		},
		{
			MethodName: "ServiceAdd",
			Handler:    _PublicAPI_ServiceAdd_Handler,
		},
		{
			MethodName: "ServiceDelete",
			Handler:    _PublicAPI_ServiceDelete_Handler,
		},
		{
			MethodName: "ServiceUpdate",
			Handler:    _PublicAPI_ServiceUpdate_Handler,
		},
		{
			MethodName: "ImageRemove",
			Handler:    _PublicAPI_ImageRemove_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _PublicAPI_Ping_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _PublicAPI_Info_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PublicAPI_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecVM",
			Handler:       _PublicAPI_ExecVM_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ContainerLogs",
			Handler:       _PublicAPI_ContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ExecStart",
			Handler:       _PublicAPI_ExecStart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Attach",
			Handler:       _PublicAPI_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ImagePull",
			Handler:       _PublicAPI_ImagePull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ImagePush",
			Handler:       _PublicAPI_ImagePush_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptorTypes) }

var fileDescriptorTypes = []byte{
	// 5250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x3c, 0x4d, 0x6f, 0x1d, 0x47,
	0x72, 0x7a, 0x5f, 0x7c, 0x7c, 0xc5, 0x4f, 0xb5, 0x28, 0xe9, 0x89, 0xd6, 0x7a, 0xb5, 0xb3, 0xf1,
	0x4a, 0x96, 0x63, 0xda, 0xd6, 0x3a, 0xb6, 0x57, 0x8e, 0xb1, 0xa6, 0x49, 0x79, 0x4d, 0xc4, 0xb2,
	0xe9, 0xa1, 0x24, 0xc3, 0xc8, 0x02, 0x9b, 0xd1, 0x9b, 0xe6, 0xe3, 0x98, 0xf3, 0x66, 0x26, 0x33,
	0xf3, 0x28, 0xd1, 0xb7, 0xe4, 0xb4, 0x80, 0x11, 0xe4, 0xb0, 0x40, 0x90, 0xcd, 0x31, 0xc9, 0x21,
	0xc8, 0x35, 0xa7, 0x04, 0xb9, 0xe4, 0x92, 0x53, 0xfe, 0x48, 0xb2, 0x97, 0x5c, 0x72, 0x0d, 0x82,
	0xaa, 0xae, 0xee, 0xe9, 0x9e, 0x37, 0x7c, 0x94, 0x6c, 0xe5, 0x40, 0x68, 0xaa, 0xba, 0xba, 0xba,
	0xba, 0xba, 0xba, 0xaa, 0xba, 0xba, 0x9f, 0x60, 0xa9, 0x3c, 0xcd, 0x64, 0xb1, 0x95, 0xe5, 0x69,
	0x99, 0x8a, 0x1e, 0x01, 0xde, 0x6f, 0x5b, 0xb0, 0xb2, 0x93, 0x26, 0x65, 0x10, 0x25, 0x32, 0xdf,
	0x4f, 0xf3, 0x52, 0x08, 0xe8, 0x26, 0xc1, 0x44, 0x0e, 0x5b, 0x37, 0x5a, 0xb7, 0x06, 0x3e, 0x7d,
	0x8b, 0x4d, 0x58, 0x3c, 0x4a, 0x8b, 0x12, 0xdb, 0x87, 0xed, 0x1b, 0xad, 0x5b, 0x3d, 0xdf, 0xc0,
	0xe2, 0xf7, 0x60, 0x65, 0x64, 0x33, 0x18, 0x76, 0x88, 0xc0, 0x45, 0x22, 0x07, 0x1a, 0x77, 0x94,
	0xc6, 0xc3, 0x2e, 0x71, 0x36, 0xb0, 0xb8, 0x02, 0x0b, 0xc8, 0x6d, 0x6f, 0x7f, 0xd8, 0xa3, 0x16,
	0x86, 0xbc, 0xf7, 0x60, 0xf5, 0x5e, 0x72, 0x12, 0xe5, 0x69, 0x32, 0x91, 0x49, 0xf9, 0x28, 0xc8,
	0xc5, 0x3a, 0x74, 0x64, 0x72, 0xc2, 0xa2, 0xe1, 0xa7, 0xd8, 0x80, 0xde, 0x49, 0x10, 0x4f, 0x25,
	0x89, 0x35, 0xf0, 0x15, 0xe0, 0xfd, 0x31, 0x2c, 0x3d, 0x4a, 0xe3, 0xe9, 0x44, 0xde, 0x4f, 0xa7,
	0x49, 0xf3, 0x94, 0xae, 0xc3, 0x60, 0x82, 0x8d, 0xfb, 0x41, 0x79, 0xc4, 0x9d, 0x2b, 0x04, 0x8a,
	0x9b, 0xcb, 0x20, 0xfc, 0x3c, 0x89, 0x4f, 0x69, 0x3e, 0x8b, 0xbe, 0x81, 0xbd, 0x9b, 0xb0, 0xf2,
	0x65, 0x10, 0x95, 0x51, 0x32, 0x3e, 0x28, 0x83, 0x72, 0x5a, 0xa0, 0xfc, 0xb9, 0x0c, 0x8a, 0x34,
	0xe1, 0x01, 0x18, 0xf2, 0x5e, 0x87, 0x15, 0x7f, 0x9a, 0x24, 0x15, 0xe1, 0x75, 0x18, 0x14, 0x65,
	0x90, 0x97, 0x32, 0xdc, 0x2e, 0x99, 0xb6, 0x42, 0x78, 0x7f, 0xdd, 0x02, 0x78, 0x20, 0xf3, 0x09,
	0x13, 0x6f, 0xc2, 0xa2, 0x7c, 0x1a, 0x95, 0x3b, 0x69, 0xa8, 0x04, 0xef, 0xf9, 0x06, 0xb6, 0x46,
	0x6c, 0xdb, 0x23, 0x8a, 0x21, 0xf4, 0x27, 0xb2, 0x28, 0x82, 0xb1, 0x24, 0xa9, 0x07, 0xbe, 0x06,
	0xdd, 0xa1, 0xbb, 0xb5, 0xa1, 0xc5, 0xcb, 0x00, 0x87, 0x51, 0x12, 0x15, 0x47, 0xd4, 0xac, 0x56,
	0xc1, 0xc2, 0x78, 0xff, 0xdd, 0x82, 0x35, 0x63, 0x25, 0x2c, 0x5f, 0x93, 0x52, 0x6f, 0xc0, 0x92,
	0x59, 0xf6, 0xbd, 0x5d, 0x16, 0xce, 0x46, 0xe1, 0x7a, 0x65, 0x47, 0x41, 0xa1, 0xe5, 0x53, 0x80,
	0xd8, 0x82, 0xfe, 0x13, 0xa5, 0x52, 0x92, 0x6d, 0xe9, 0xce, 0xc6, 0x96, 0xb2, 0x55, 0x47, 0xd1,
	0xbe, 0x26, 0x42, 0xfa, 0x5c, 0x69, 0x96, 0x84, 0xad, 0xe8, 0x1d, 0x7d, 0xfb, 0x9a, 0x48, 0xbc,
	0x05, 0x50, 0xca, 0x7c, 0x12, 0x25, 0x41, 0x29, 0xc3, 0xe1, 0x02, 0x75, 0xb9, 0xc8, 0x5d, 0x2a,
	0x95, 0xfb, 0x16, 0x91, 0xf7, 0x77, 0xf6, 0xc6, 0xd8, 0x4b, 0x0e, 0x53, 0xb1, 0x05, 0x03, 0x33,
	0x13, 0x9a, 0xf5, 0xd2, 0x9d, 0x75, 0xe6, 0x61, 0x08, 0xfd, 0x8a, 0x04, 0x55, 0x3e, 0xca, 0x65,
	0xa0, 0x54, 0x8e, 0xaa, 0xe8, 0xf8, 0x15, 0x82, 0x14, 0x91, 0x86, 0x7b, 0xbb, 0x46, 0x11, 0x08,
	0x88, 0x2d, 0x58, 0x28, 0x48, 0x16, 0xd6, 0xc3, 0x95, 0xfa, 0x00, 0x2c, 0x29, 0x53, 0x79, 0x7f,
	0xd9, 0x85, 0x81, 0x69, 0xfb, 0xee, 0x4b, 0x12, 0x4d, 0x2a, 0x93, 0x51, 0x00, 0x9a, 0x12, 0x7d,
	0xec, 0xed, 0xb2, 0xb9, 0x68, 0x50, 0xdc, 0x82, 0x35, 0xfa, 0xdc, 0x9f, 0xc6, 0xf1, 0x7e, 0x1a,
	0x47, 0xa3, 0x53, 0xb6, 0x98, 0x3a, 0x1a, 0xcd, 0xea, 0x49, 0x9a, 0x1f, 0x47, 0xc9, 0x78, 0x37,
	0xca, 0x49, 0xed, 0x03, 0xdf, 0xc2, 0xa0, 0xbc, 0xd3, 0x42, 0xe6, 0xc3, 0xbe, 0x92, 0x17, 0xbf,
	0x71, 0x8b, 0x97, 0xe5, 0xe9, 0x70, 0x91, 0x36, 0x1d, 0x7e, 0xe2, 0x46, 0x18, 0xa5, 0x93, 0x49,
	0x90, 0x84, 0xc5, 0x70, 0x70, 0xa3, 0x83, 0xae, 0x43, 0xc3, 0xc8, 0x21, 0xc8, 0xc7, 0xc5, 0x10,
	0x08, 0x4f, 0xdf, 0xe2, 0x36, 0x6a, 0x36, 0x2f, 0x8b, 0xe1, 0xd2, 0x8d, 0x8e, 0x65, 0x1a, 0x8e,
	0x97, 0xf3, 0x15, 0x89, 0xb8, 0xa9, 0x1c, 0xca, 0x32, 0x51, 0x5e, 0x66, 0x4a, 0xd7, 0xe9, 0x28,
	0x3f, 0xf3, 0x0e, 0x2c, 0x9f, 0x54, 0x1e, 0xa5, 0x18, 0xae, 0x50, 0x0f, 0xc1, 0x3d, 0x2c, 0x67,
	0xe3, 0x3b, 0x74, 0xe2, 0x6d, 0x58, 0x88, 0x83, 0xc7, 0x32, 0x2e, 0x86, 0xab, 0xd4, 0xe3, 0x7a,
	0x5d, 0x9a, 0xad, 0x4f, 0xa9, 0xf9, 0x5e, 0x52, 0xe6, 0xa7, 0x3e, 0xd3, 0x6e, 0xfe, 0x0c, 0x96,
	0x2c, 0x34, 0xea, 0xe4, 0x58, 0x9e, 0x6a, 0xb7, 0x77, 0x2c, 0x4f, 0x9b, 0xdd, 0xde, 0xdd, 0xf6,
	0x7b, 0x2d, 0xef, 0x9f, 0x5b, 0xb0, 0xe6, 0x7f, 0xb4, 0xab, 0x24, 0x3a, 0x48, 0xa7, 0xf9, 0x88,
	0xdc, 0xf7, 0x24, 0x4d, 0xa2, 0x32, 0xcd, 0x8b, 0x61, 0x4b, 0x69, 0x50, 0xc3, 0xd5, 0xea, 0xb7,
	0xed, 0xd5, 0xbf, 0x02, 0x0b, 0x87, 0xc5, 0x83, 0xd3, 0x4c, 0x1b, 0x05, 0x43, 0xa8, 0xef, 0x2c,
	0x35, 0x2e, 0x9c, 0xbe, 0xcd, 0x2a, 0xf6, 0xac, 0x55, 0x1c, 0x42, 0xff, 0x58, 0x9e, 0xe6, 0xb8,
	0x41, 0xd5, 0xb2, 0x6b, 0xd0, 0xf1, 0xac, 0xfd, 0x9a, 0x67, 0x3d, 0x85, 0xc1, 0x7e, 0x1a, 0x2a,
	0xd1, 0x1b, 0x8d, 0xf9, 0x0a, 0x2c, 0x14, 0x34, 0x25, 0xed, 0xf7, 0x14, 0x84, 0xf8, 0x30, 0x8f,
	0x4e, 0x64, 0xae, 0xc5, 0x55, 0x90, 0xb8, 0x05, 0x9d, 0xfc, 0x71, 0x58, 0xdb, 0x4b, 0x35, 0xed,
	0xf8, 0x48, 0xe2, 0xfd, 0x79, 0x1b, 0xfa, 0xfb, 0x69, 0x78, 0x90, 0xc9, 0x91, 0xb8, 0x0d, 0x7d,
	0xb5, 0x86, 0x4a, 0x5b, 0xd5, 0x36, 0x37, 0xc2, 0xf9, 0x9a, 0x40, 0xbc, 0x09, 0x60, 0xf6, 0x52,
	0x31, 0x6c, 0x3b, 0xe4, 0x95, 0x57, 0xb0, 0x68, 0xc4, 0x1d, 0x63, 0x11, 0x1d, 0xa2, 0xde, 0xac,
	0x98, 0xe3, 0xe8, 0x4d, 0xf6, 0x80, 0xba, 0x38, 0x19, 0x65, 0x53, 0x9a, 0x48, 0xcf, 0xa7, 0x6f,
	0x9c, 0xf3, 0x44, 0x4e, 0xd2, 0x5c, 0xed, 0xbe, 0x9e, 0xcf, 0xd0, 0xf7, 0xb1, 0x9d, 0x3f, 0x6b,
	0xd3, 0x02, 0xb0, 0x83, 0x37, 0xae, 0xba, 0x65, 0xbb, 0x6a, 0x2b, 0xc4, 0xb4, 0xdd, 0x10, 0x53,
	0x05, 0xa5, 0x8e, 0x13, 0x94, 0xaa, 0xf0, 0xde, 0xb5, 0xc3, 0xbb, 0xf6, 0x80, 0x18, 0xf5, 0x3b,
	0xda, 0x03, 0xee, 0x9b, 0x40, 0xf5, 0x20, 0x9a, 0x48, 0xb6, 0x9d, 0x0a, 0x21, 0x3e, 0x84, 0xb5,
	0x91, 0xeb, 0x0a, 0x87, 0x7d, 0xd2, 0xe2, 0x59, 0x8e, 0xb2, 0x4e, 0x5e, 0x85, 0x3a, 0x1a, 0x60,
	0xd1, 0x0e, 0x75, 0x88, 0xf1, 0xfe, 0xb3, 0x45, 0x86, 0x40, 0x1e, 0xdf, 0xf8, 0xe8, 0x96, 0xed,
	0xa3, 0x05, 0x74, 0x8f, 0xa3, 0x24, 0xe4, 0xe9, 0xd3, 0x37, 0x72, 0x0d, 0xb2, 0xe8, 0x91, 0xcc,
	0x8b, 0xc8, 0xcc, 0xdf, 0xc2, 0x88, 0x55, 0x68, 0x9f, 0x4c, 0x78, 0xfe, 0xed, 0x93, 0x89, 0x1b,
	0x1b, 0x7a, 0xf5, 0xd8, 0xe0, 0x41, 0xb7, 0xc8, 0xe4, 0x88, 0x03, 0xd5, 0xaa, 0x6b, 0x20, 0x3e,
	0xb5, 0x89, 0x5b, 0x26, 0x52, 0xf4, 0x9d, 0x50, 0x64, 0xd6, 0x4f, 0xc7, 0x08, 0x5c, 0xb1, 0x2c,
	0x0d, 0x3f, 0x0b, 0xcc, 0x74, 0x35, 0xe8, 0xfd, 0x6d, 0x1b, 0x06, 0x7b, 0xe4, 0xd5, 0x71, 0xb6,
	0xab, 0xd0, 0x8e, 0x42, 0x9e, 0x6a, 0x3b, 0x0a, 0x29, 0x65, 0x0b, 0x72, 0x99, 0x94, 0x26, 0x6c,
	0x18, 0x58, 0xed, 0xe2, 0x2c, 0x7d, 0x10, 0x8c, 0x95, 0x19, 0x0f, 0x7c, 0x03, 0x63, 0xc4, 0xc1,
	0xef, 0xdd, 0x68, 0x2c, 0x8b, 0x12, 0x03, 0x19, 0x36, 0xdb, 0x28, 0x94, 0x88, 0x27, 0xcb, 0x73,
	0xd7, 0x20, 0xf6, 0x3d, 0x89, 0xf2, 0x72, 0x1a, 0xc4, 0x07, 0xd1, 0x37, 0x6a, 0xfd, 0x3b, 0xbe,
	0x8d, 0xb2, 0x1c, 0x6a, 0xdf, 0x71, 0xa8, 0x66, 0x1e, 0x2f, 0xda, 0xa1, 0xfe, 0x5b, 0x1b, 0x16,
	0x59, 0xa9, 0x85, 0xf8, 0x11, 0x74, 0x70, 0x1f, 0xaa, 0xe8, 0xbf, 0xa6, 0x6d, 0x2e, 0x9b, 0x52,
	0xab, 0x8f, 0x6d, 0xe2, 0x26, 0xf4, 0x1e, 0xc7, 0xe9, 0xe8, 0x98, 0x38, 0x55, 0x69, 0xc6, 0x47,
	0xf1, 0x71, 0x94, 0x2a, 0x32, 0xd5, 0x2e, 0x6e, 0x9b, 0x0d, 0xdc, 0x21, 0x4a, 0x1d, 0x4c, 0xee,
	0x13, 0x52, 0x91, 0x32, 0x85, 0x78, 0x1d, 0xfa, 0x89, 0x2c, 0x31, 0x74, 0xb2, 0x33, 0xbb, 0xc4,
	0xc4, 0x9f, 0x29, 0xac, 0xa2, 0xd6, 0x34, 0x62, 0x0b, 0x8d, 0x3c, 0x96, 0xc5, 0x69, 0x51, 0xca,
	0x09, 0xed, 0xaf, 0xca, 0x8c, 0x3e, 0x2e, 0x14, 0xb1, 0x45, 0x81, 0xe6, 0x58, 0x46, 0x13, 0x59,
	0x94, 0xc1, 0x24, 0x63, 0xa5, 0x57, 0x08, 0x67, 0xd3, 0xa9, 0xce, 0x67, 0x6d, 0x3a, 0x66, 0x5d,
	0x27, 0xf7, 0x0e, 0x60, 0x51, 0x2b, 0x49, 0xbc, 0x02, 0xbd, 0x29, 0xb9, 0x8f, 0x19, 0x25, 0x3e,
	0x44, 0xb4, 0xaf, 0x5a, 0xd1, 0x12, 0x3e, 0x4d, 0x83, 0x70, 0xfb, 0x44, 0xe6, 0xda, 0xd7, 0xf4,
	0x7c, 0x1b, 0xe5, 0x85, 0xc4, 0x94, 0x3a, 0xe1, 0xf2, 0x95, 0x69, 0x19, 0xc4, 0xc4, 0xb4, 0xeb,
	0x2b, 0x00, 0x3d, 0x4f, 0x26, 0xf3, 0x9d, 0x6c, 0x4a, 0x8e, 0xb9, 0xeb, 0x33, 0x64, 0x22, 0x56,
	0x87, 0x88, 0x55, 0xc4, 0xc2, 0xd0, 0xa2, 0xd4, 0xd5, 0x25, 0x2c, 0x43, 0xde, 0x7f, 0x74, 0x01,
	0xaa, 0xb5, 0x13, 0x9f, 0xc3, 0xd5, 0x28, 0x3d, 0x90, 0xf9, 0x49, 0x34, 0x92, 0x1f, 0x9d, 0x96,
	0xb2, 0xf0, 0xe5, 0x68, 0x9a, 0x17, 0xd1, 0x89, 0xe4, 0x58, 0x71, 0xb9, 0xbe, 0xde, 0xca, 0x10,
	0xcf, 0xea, 0x25, 0x7e, 0x01, 0x97, 0x4c, 0x53, 0x58, 0x31, 0x6b, 0xcf, 0x63, 0xd6, 0xd4, 0x43,
	0xec, 0xc0, 0xc5, 0x28, 0xfd, 0x62, 0x2a, 0xa7, 0x36, 0x9b, 0xce, 0x3c, 0x36, 0xb3, 0xf4, 0xe2,
	0x3e, 0x5c, 0x31, 0xbc, 0xd1, 0x1d, 0x56, 0x9c, 0xba, 0xf3, 0x38, 0x9d, 0xd1, 0x49, 0x4d, 0x0e,
	0x73, 0x78, 0x97, 0x57, 0xef, 0x9c, 0xc9, 0xcd, 0xf4, 0x50, 0x93, 0xbb, 0x2f, 0xf3, 0xb1, 0x3d,
	0xb9, 0x85, 0x73, 0x26, 0x57, 0xa3, 0x17, 0x3f, 0x87, 0xb5, 0x28, 0x75, 0x25, 0xe9, 0xcf, 0x63,
	0x51, 0xa7, 0x16, 0xdb, 0xb0, 0x5e, 0xc8, 0x11, 0xa6, 0x4d, 0x15, 0x87, 0xc5, 0x79, 0x1c, 0x66,
	0xc8, 0xbd, 0xff, 0x6a, 0xc1, 0xaa, 0x4b, 0xd4, 0x98, 0xe8, 0x08, 0xe8, 0x22, 0x43, 0x1d, 0x63,
	0xf0, 0xdb, 0x4a, 0x7e, 0x3a, 0x4e, 0xf2, 0xb3, 0x01, 0xbd, 0x49, 0xf0, 0x75, 0x9a, 0xb3, 0xe1,
	0x2a, 0x80, 0xb0, 0x51, 0x92, 0xaa, 0xb4, 0x0c, 0xb1, 0x08, 0x88, 0x9f, 0x42, 0x17, 0xa3, 0x02,
	0xab, 0xee, 0x87, 0x8d, 0x52, 0x6f, 0x55, 0xf2, 0x13, 0xf1, 0xe6, 0xbb, 0x30, 0xa8, 0xa4, 0x3d,
	0xc7, 0x75, 0x76, 0x6d, 0xd7, 0xf9, 0xbb, 0x16, 0x2c, 0x59, 0xde, 0x0c, 0x29, 0xab, 0xad, 0xdf,
	0xd5, 0x3b, 0xbd, 0x3a, 0x25, 0x1c, 0xc8, 0x92, 0x99, 0x58, 0x18, 0x8c, 0x16, 0x87, 0x41, 0x14,
	0x8f, 0x92, 0x92, 0x37, 0xac, 0x06, 0xc5, 0x47, 0x56, 0xe9, 0x61, 0x37, 0x28, 0x03, 0xf6, 0x8d,
	0xd7, 0x67, 0x1d, 0xa9, 0xfa, 0x44, 0x1a, 0xdf, 0xed, 0x22, 0x3e, 0x81, 0xf5, 0xa3, 0x48, 0xe6,
	0x41, 0x3e, 0x3a, 0x8a, 0x46, 0x41, 0x4c, 0x6c, 0x7a, 0xcf, 0xc0, 0x66, 0xa6, 0x97, 0xf7, 0x05,
	0x5c, 0x6e, 0x24, 0xa5, 0x00, 0x3c, 0x3e, 0x0c, 0xa6, 0x71, 0xc9, 0x13, 0xd7, 0x20, 0x4e, 0x3d,
	0x1b, 0x4f, 0x82, 0xaf, 0x55, 0x23, 0x4f, 0xbd, 0xc2, 0x78, 0xdf, 0xb6, 0x60, 0xd9, 0xf6, 0xf0,
	0xe2, 0x0f, 0x00, 0xa2, 0xa4, 0x94, 0xf9, 0x61, 0x30, 0x32, 0xd9, 0xa9, 0xb6, 0xbd, 0x3d, 0xdd,
	0xc0, 0xfe, 0xbd, 0x22, 0x14, 0x37, 0xa0, 0x53, 0x8e, 0x32, 0x8e, 0x48, 0x3a, 0x10, 0x3c, 0x18,
	0x65, 0x48, 0xe9, 0x63, 0x13, 0xa6, 0x1c, 0xe5, 0x28, 0x7b, 0x87, 0x43, 0x51, 0x9d, 0x84, 0xda,
	0xbc, 0x7f, 0x6a, 0x43, 0x9f, 0x31, 0xe8, 0x9e, 0x31, 0x3a, 0x3c, 0x8e, 0xa9, 0x44, 0xc0, 0xf3,
	0xb2, 0x51, 0x38, 0xeb, 0xe2, 0x34, 0x39, 0x90, 0x89, 0x9e, 0x98, 0x06, 0xb9, 0xc5, 0x97, 0xa3,
	0x13, 0xbd, 0xa0, 0x0c, 0x62, 0x5a, 0x71, 0x18, 0x25, 0xb8, 0xfd, 0xdf, 0x62, 0x6b, 0x36, 0xb0,
	0xd5, 0x76, 0x87, 0x6d, 0xda, 0xc0, 0xd8, 0x86, 0xe1, 0x0a, 0x01, 0x0a, 0x5f, 0x5d, 0xdf, 0xc0,
	0x68, 0x74, 0xa3, 0x38, 0x2d, 0x24, 0xe5, 0x49, 0x5d, 0x5f, 0x01, 0x94, 0x80, 0xe1, 0x07, 0x75,
	0x59, 0xa4, 0x96, 0x0a, 0x81, 0x12, 0xc6, 0x41, 0x51, 0x6e, 0x8f, 0x8e, 0x87, 0x03, 0x25, 0x21,
	0x83, 0xb8, 0x09, 0xe3, 0xa8, 0x28, 0x65, 0x32, 0x04, 0x15, 0x26, 0x14, 0x44, 0x29, 0x4d, 0x9c,
	0x16, 0x78, 0xe0, 0x59, 0x52, 0x3d, 0x18, 0xf4, 0x7e, 0xdd, 0x86, 0x55, 0x77, 0x69, 0x1a, 0x77,
	0xfc, 0x10, 0xfa, 0xf9, 0x53, 0x8a, 0x0d, 0x5a, 0x5d, 0x0c, 0xa2, 0xa8, 0xf9, 0xd3, 0xfd, 0x60,
	0x74, 0x2c, 0xcb, 0x82, 0x15, 0x56, 0x21, 0x28, 0x13, 0x7b, 0x7a, 0x2f, 0xcf, 0xf1, 0x6c, 0xc7,
	0x2a, 0xd3, 0xb0, 0xea, 0xb9, 0x9b, 0xa7, 0x59, 0xc6, 0x99, 0x16, 0xf5, 0x64, 0x04, 0x8e, 0x58,
	0xf2, 0x88, 0x4a, 0x67, 0x1a, 0xa4, 0x74, 0xc0, 0x8c, 0xa8, 0xd4, 0x56, 0x21, 0x48, 0xd9, 0x7a,
	0xc4, 0x45, 0x56, 0xb6, 0x35, 0x62, 0x69, 0x46, 0x1c, 0xe8, 0x9e, 0x8c, 0xf0, 0x7e, 0xd7, 0x81,
	0x3e, 0xa7, 0x1f, 0x74, 0x64, 0x93, 0x18, 0x31, 0x74, 0xd1, 0x4c, 0x41, 0xb8, 0x5c, 0x71, 0x34,
	0x89, 0xb4, 0xd1, 0x28, 0xa0, 0xf2, 0x1c, 0x1d, 0xdb, 0x73, 0x5c, 0x87, 0x41, 0x70, 0x12, 0x44,
	0x71, 0xf0, 0x38, 0x96, 0x3c, 0xf9, 0x0a, 0x21, 0x7e, 0x02, 0xab, 0x78, 0xb2, 0x2c, 0x76, 0xd2,
	0x49, 0x16, 0xcb, 0xd2, 0xa8, 0xa0, 0x86, 0x55, 0xf9, 0x6a, 0x10, 0x16, 0x2a, 0x5c, 0xb0, 0x2e,
	0x6c, 0x14, 0x52, 0x18, 0x47, 0x1e, 0x84, 0xac, 0x11, 0x1b, 0xa5, 0x4f, 0xb5, 0xe6, 0x4c, 0xd1,
	0xf5, 0x0d, 0x2c, 0x6e, 0xc1, 0xda, 0x93, 0x3c, 0x2a, 0xa5, 0x25, 0x88, 0xd2, 0x4c, 0x1d, 0x2d,
	0x3c, 0x58, 0x56, 0x28, 0x16, 0x45, 0x99, 0x98, 0x83, 0xc3, 0x59, 0xf1, 0xc0, 0x5f, 0xe6, 0x51,
	0x89, 0x86, 0xa8, 0xec, 0xad, 0x86, 0x45, 0xdd, 0x50, 0x3f, 0x12, 0x69, 0x59, 0xe9, 0xc6, 0x20,
	0x70, 0xa4, 0x28, 0xdd, 0x4b, 0xf6, 0xf3, 0x74, 0x9c, 0xcb, 0xa2, 0x18, 0xae, 0xa8, 0x91, 0x6c,
	0x1c, 0xae, 0x90, 0x0a, 0x80, 0xc3, 0x55, 0x65, 0xea, 0x0a, 0x42, 0x09, 0x9e, 0xc8, 0x68, 0x7c,
	0x54, 0xca, 0x70, 0x4f, 0xb5, 0xaf, 0x29, 0x09, 0x5c, 0xac, 0xf7, 0x0f, 0x6d, 0xab, 0x68, 0xc8,
	0xab, 0x5e, 0xab, 0x46, 0xb5, 0x66, 0xab, 0x51, 0x9c, 0x61, 0xb7, 0x9f, 0x25, 0xc3, 0xee, 0x3c,
	0x73, 0x86, 0xdd, 0x7d, 0x9e, 0x0c, 0xbb, 0xf7, 0xdc, 0x19, 0xf6, 0xc2, 0xf3, 0x65, 0xd8, 0xfd,
	0x5a, 0x86, 0xed, 0xfd, 0x04, 0x56, 0xf9, 0xcc, 0xe9, 0xcb, 0x3f, 0x9d, 0xca, 0xa2, 0x6c, 0x3e,
	0x7a, 0x7a, 0xef, 0xc3, 0x9a, 0xa1, 0x2b, 0xb2, 0x34, 0x29, 0xd0, 0xba, 0xf0, 0x38, 0x87, 0x28,
	0x4e, 0xa8, 0xad, 0xe3, 0x22, 0x11, 0xea, 0x66, 0xef, 0x2e, 0x0d, 0xf2, 0x69, 0x54, 0x94, 0x73,
	0x07, 0xa1, 0x62, 0xc3, 0xc4, 0x9c, 0xf9, 0xe8, 0xdb, 0xfb, 0xdf, 0x16, 0xac, 0x98, 0xce, 0x05,
	0x86, 0xae, 0xe6, 0xbe, 0xd6, 0x59, 0xb3, 0xed, 0x9c, 0x35, 0x0d, 0xd7, 0x4e, 0xc5, 0x95, 0x32,
	0x9a, 0xaa, 0xda, 0x39, 0x30, 0x27, 0xd6, 0xf9, 0xa7, 0xe3, 0xf7, 0xcc, 0x09, 0x50, 0xa9, 0xfd,
	0x46, 0x35, 0xe1, 0x4a, 0xbe, 0x17, 0x7d, 0x0a, 0xdc, 0x26, 0xcd, 0x33, 0x7f, 0xa5, 0xf9, 0x2d,
	0x9a, 0x2b, 0xa2, 0x38, 0x10, 0x6f, 0x34, 0x09, 0xe2, 0x6b, 0x22, 0xef, 0x43, 0xd8, 0x30, 0xdb,
	0xe1, 0xbb, 0xad, 0xc2, 0xb7, 0x2d, 0xb8, 0x54, 0x63, 0x41, 0x6b, 0x71, 0xfe, 0xae, 0xb2, 0x2f,
	0x69, 0xac, 0xd5, 0x71, 0x91, 0x67, 0xd4, 0xa4, 0xcf, 0x58, 0x25, 0xef, 0x2b, 0xb8, 0x5c, 0x17,
	0x46, 0x29, 0xe6, 0x43, 0x6b, 0x30, 0x4b, 0x3d, 0x9b, 0xf5, 0xd3, 0xa2, 0xa5, 0x24, 0xb7, 0x83,
	0xf7, 0xb6, 0xa5, 0x2a, 0x7b, 0x57, 0x5c, 0xaf, 0x97, 0xe0, 0x07, 0x56, 0xc1, 0xdd, 0x3b, 0xb0,
	0x04, 0x72, 0xf6, 0xc8, 0x5d, 0x4b, 0x20, 0x6b, 0xa7, 0xcc, 0x54, 0x86, 0xa9, 0x93, 0x4b, 0xea,
	0xed, 0xc3, 0xf2, 0xa3, 0xfb, 0x96, 0xae, 0xf5, 0xba, 0xb4, 0x2c, 0x3b, 0x36, 0x7a, 0x6b, 0x37,
	0xeb, 0xad, 0xe3, 0xe8, 0xed, 0x67, 0xb0, 0xa2, 0x39, 0x3e, 0xaf, 0x01, 0x7c, 0x00, 0xab, 0x46,
	0x18, 0x35, 0xb5, 0xd7, 0x60, 0xe1, 0x64, 0x62, 0x29, 0x59, 0x7b, 0x2d, 0x5b, 0x66, 0x9f, 0x49,
	0xbc, 0x5f, 0xc2, 0x3a, 0x95, 0x49, 0xec, 0xc1, 0xa9, 0x1e, 0x16, 0x97, 0x32, 0xdf, 0xce, 0xc7,
	0x05, 0x4b, 0x60, 0x61, 0xa8, 0x12, 0x4c, 0x90, 0x2e, 0xb9, 0x2a, 0x08, 0x37, 0x4f, 0x10, 0xc7,
	0x7c, 0x39, 0x86, 0x9f, 0xde, 0x0e, 0x5c, 0xb4, 0xb8, 0x9b, 0x4d, 0x32, 0x88, 0x34, 0xb2, 0x56,
	0x4d, 0x35, 0x15, 0x1b, 0xbf, 0x22, 0x41, 0x0f, 0xf7, 0xe8, 0xfe, 0x0e, 0xed, 0x75, 0x2d, 0xe1,
	0x7a, 0x55, 0x73, 0xe9, 0xa9, 0x00, 0x50, 0x95, 0x3e, 0xdb, 0x76, 0xe9, 0xd3, 0xfb, 0x09, 0xac,
	0x57, 0x9d, 0x59, 0x80, 0x86, 0xf5, 0xf2, 0x5e, 0xc1, 0x41, 0x7c, 0x39, 0x49, 0x4f, 0xcc, 0x20,
	0x4d, 0x64, 0x7f, 0x88, 0xec, 0x34, 0x59, 0xc5, 0x6e, 0x54, 0xdd, 0xc8, 0xd1, 0x37, 0x65, 0x98,
	0xc1, 0xb4, 0x30, 0x5e, 0x83, 0x00, 0xef, 0x37, 0x2d, 0xb8, 0xf8, 0xb0, 0x90, 0xf9, 0x4e, 0xfd,
	0x1e, 0xd4, 0xdc, 0xa4, 0xb6, 0xce, 0xbb, 0x49, 0x6d, 0x37, 0xdd, 0xa4, 0x52, 0x32, 0x42, 0x67,
	0x6d, 0xeb, 0xb6, 0xd5, 0x46, 0xcd, 0xbb, 0x6b, 0xf5, 0x7e, 0xdd, 0x82, 0x4b, 0x28, 0x15, 0xd7,
	0xb1, 0xe5, 0xa1, 0xcc, 0x65, 0x32, 0x52, 0x85, 0xfd, 0xa0, 0x3c, 0xd2, 0xf3, 0xc7, 0x6f, 0x54,
	0xb3, 0x2a, 0x73, 0xeb, 0xa5, 0x57, 0xd0, 0xbc, 0xcb, 0x51, 0xf1, 0x2a, 0xa6, 0x75, 0x65, 0x10,
	0xc5, 0x1c, 0x72, 0x75, 0x70, 0xb6, 0xc6, 0x64, 0x02, 0xef, 0x1f, 0x59, 0x41, 0x1f, 0x47, 0xf1,
	0x39, 0x82, 0x50, 0xea, 0x1f, 0xcb, 0xa4, 0x72, 0x5c, 0x06, 0x26, 0x7a, 0x99, 0x4f, 0x74, 0x5c,
	0xc1, 0x6f, 0x53, 0xdf, 0xe9, 0x5a, 0x37, 0x12, 0x1b, 0xd0, 0x1b, 0xe7, 0xe9, 0x34, 0xe3, 0x6b,
	0x0a, 0x05, 0x88, 0x9b, 0x46, 0xdc, 0x05, 0x27, 0xe1, 0x30, 0x72, 0x69, 0x61, 0xff, 0x04, 0x16,
	0x11, 0x87, 0x7f, 0x8d, 0xe9, 0xbb, 0x61, 0xdf, 0xb6, 0xd9, 0xdf, 0x86, 0xf5, 0x20, 0x0c, 0xa3,
	0x32, 0x4a, 0x93, 0x20, 0xfe, 0x05, 0xa2, 0x74, 0xb9, 0x74, 0x06, 0xef, 0xed, 0xc2, 0xc2, 0x43,
	0x95, 0xec, 0x0a, 0xe8, 0x7e, 0x66, 0xf1, 0xd7, 0xe1, 0xf3, 0x93, 0x20, 0x0f, 0x39, 0x2b, 0xa6,
	0x6f, 0xc4, 0x1d, 0xa4, 0x87, 0xfa, 0x54, 0x4c, 0xdf, 0xde, 0xdf, 0x2f, 0xc0, 0x8a, 0x63, 0x75,
	0x67, 0x49, 0xdb, 0x70, 0xe9, 0x33, 0x84, 0x3e, 0xe6, 0x36, 0x61, 0xa4, 0xaf, 0x51, 0x34, 0x88,
	0x96, 0x99, 0x4b, 0xaa, 0xc2, 0xf3, 0x85, 0x9f, 0xd2, 0xac, 0x8b, 0xd4, 0x57, 0x77, 0xbd, 0xea,
	0xea, 0xee, 0x3d, 0x2a, 0xaa, 0x8d, 0xca, 0xb8, 0x16, 0xaa, 0x1d, 0x09, 0xb7, 0x0e, 0x88, 0x84,
	0x43, 0xb5, 0xa2, 0x17, 0xaf, 0x42, 0x57, 0x26, 0x27, 0x45, 0xad, 0x40, 0x53, 0xbb, 0x99, 0x23,
	0x12, 0x3a, 0x7a, 0xa9, 0xfb, 0x40, 0x2a, 0xc6, 0x0c, 0x7c, 0x0d, 0xa2, 0x6f, 0x93, 0xc8, 0x35,
	0x4b, 0xa3, 0xa4, 0xe4, 0xbb, 0x43, 0x0b, 0x23, 0xb6, 0xf4, 0x4d, 0x21, 0xd0, 0x28, 0xc3, 0x26,
	0xe9, 0xec, 0xdb, 0xc2, 0xb7, 0xab, 0x8b, 0xa1, 0x25, 0x27, 0xa4, 0x35, 0xec, 0xa8, 0xea, 0x8a,
	0x68, 0x0b, 0x7a, 0x94, 0x08, 0xf2, 0x2d, 0xe3, 0xb0, 0x6e, 0x62, 0xa6, 0x87, 0x22, 0x13, 0x3f,
	0x66, 0xeb, 0x5d, 0x99, 0xb1, 0x48, 0xfc, 0x63, 0x73, 0x7e, 0xaf, 0x76, 0xaf, 0xd8, 0xac, 0xd9,
	0xa6, 0xbb, 0x24, 0x55, 0xe6, 0x5f, 0x33, 0x65, 0xfe, 0x97, 0x01, 0x0e, 0xca, 0x34, 0x3b, 0x88,
	0xc6, 0x49, 0x10, 0x0f, 0x2f, 0xaa, 0x00, 0x50, 0x61, 0xc4, 0x4d, 0xe8, 0x4f, 0xc9, 0x2e, 0x8b,
	0xa1, 0xa0, 0xa1, 0x56, 0xf4, 0x50, 0x84, 0xf5, 0x75, 0x2b, 0x1d, 0x9a, 0xd3, 0x31, 0xbd, 0xa7,
	0xb8, 0xa4, 0xcc, 0x87, 0x41, 0xc7, 0x61, 0x6c, 0xb8, 0x0e, 0x03, 0x73, 0x32, 0x6b, 0xfd, 0x9f,
	0x27, 0x27, 0xfb, 0x3e, 0xe9, 0xdc, 0x5d, 0x58, 0x26, 0x65, 0x4a, 0xae, 0xa1, 0xe9, 0x0b, 0xb6,
	0x56, 0xe3, 0x05, 0x9b, 0x1b, 0x65, 0x0e, 0x95, 0x2b, 0xc0, 0xb5, 0x3b, 0xeb, 0xb1, 0x8c, 0x4c,
	0x46, 0x69, 0x18, 0x25, 0x63, 0xed, 0xad, 0x34, 0x8c, 0x32, 0x4e, 0xf3, 0x88, 0xb7, 0x17, 0x7e,
	0x2a, 0xeb, 0x4d, 0x4a, 0x99, 0xe8, 0x67, 0x19, 0x1a, 0xc4, 0x68, 0x5d, 0xd9, 0xd5, 0xe7, 0x19,
	0x3a, 0x0b, 0xe3, 0xd9, 0x5a, 0xcd, 0x77, 0xad, 0xed, 0x99, 0xbb, 0x56, 0x73, 0xef, 0xdb, 0x71,
	0xef, 0x7d, 0xbd, 0xdf, 0xb6, 0x00, 0x2a, 0xf6, 0xcf, 0x7b, 0xdb, 0x7a, 0x98, 0xe6, 0x93, 0xa0,
	0x34, 0x97, 0xc3, 0x04, 0x89, 0x37, 0x60, 0x21, 0x25, 0x31, 0xd9, 0xf7, 0x5f, 0x9d, 0xd9, 0x1d,
	0x6a, 0x16, 0x3e, 0x93, 0xa9, 0x5b, 0x66, 0xaa, 0x73, 0xf6, 0xf4, 0x2d, 0x33, 0x42, 0xde, 0x5f,
	0xb4, 0x94, 0x13, 0x33, 0x65, 0x13, 0xa4, 0x7c, 0x9c, 0x47, 0xe1, 0xd8, 0x54, 0x0b, 0x14, 0x44,
	0xc6, 0xac, 0x7d, 0x6e, 0x3b, 0xca, 0xe8, 0xcc, 0x7a, 0x48, 0x13, 0x61, 0xd1, 0x14, 0x84, 0x7a,
	0x9f, 0x04, 0x23, 0xd6, 0x30, 0x7e, 0xa2, 0xd6, 0xc6, 0x41, 0x29, 0x9f, 0x04, 0xfa, 0xf5, 0x82,
	0x06, 0xc9, 0x8d, 0x05, 0x19, 0xdf, 0x3d, 0xe2, 0xa7, 0xf7, 0x09, 0x08, 0x14, 0x47, 0x17, 0xf0,
	0x83, 0xd1, 0xb1, 0x4c, 0x42, 0xeb, 0x5e, 0xb3, 0xe5, 0xdc, 0x6b, 0xce, 0x79, 0x2c, 0xe5, 0xfd,
	0x4d, 0x0b, 0x96, 0x2c, 0x56, 0x74, 0xdb, 0xa9, 0x3e, 0x0d, 0x9b, 0x0a, 0xe1, 0x04, 0xf2, 0x76,
	0xed, 0xd1, 0xd4, 0xf9, 0x69, 0xc0, 0x1b, 0xd0, 0xc3, 0x71, 0x0b, 0x2e, 0xdd, 0x5f, 0xb3, 0x56,
	0xc3, 0x9d, 0x89, 0xaf, 0xe8, 0xbc, 0xbf, 0x6a, 0xc1, 0x32, 0x9e, 0x5d, 0xd2, 0xf1, 0x4e, 0x9a,
	0x1c, 0x46, 0x63, 0x53, 0x85, 0x6e, 0x59, 0x55, 0xe8, 0x77, 0x61, 0x61, 0x44, 0xad, 0x7c, 0x45,
	0xf1, 0x43, 0xeb, 0xd0, 0xa3, 0x3b, 0x6e, 0xa9, 0x7f, 0xd8, 0xef, 0x28, 0x72, 0xdc, 0xad, 0x16,
	0xfa, 0xb9, 0x76, 0xeb, 0x31, 0x2c, 0xe1, 0x8c, 0xee, 0x07, 0x59, 0x86, 0x66, 0x3d, 0x93, 0x27,
	0xb5, 0x6a, 0x87, 0x99, 0x99, 0x4c, 0x8b, 0x95, 0x67, 0x32, 0x2d, 0x5b, 0xb1, 0x9d, 0x5a, 0x86,
	0x94, 0xc0, 0x06, 0xd2, 0x4c, 0xd4, 0x60, 0x5f, 0x1e, 0x45, 0x25, 0x65, 0xa6, 0x18, 0xcb, 0xa9,
	0xa2, 0x9a, 0x04, 0x31, 0x97, 0x04, 0xf4, 0x63, 0x8a, 0x19, 0x3c, 0xd2, 0xca, 0xa7, 0x35, 0xda,
	0xb6, 0xa2, 0xad, 0xe3, 0xbd, 0xdf, 0x2c, 0x40, 0x1f, 0xd7, 0x64, 0x3f, 0x0d, 0x9b, 0xae, 0x60,
	0x51, 0x66, 0x3b, 0xf1, 0xd1, 0xb0, 0x59, 0x9c, 0x8e, 0xb5, 0x38, 0xdf, 0x35, 0x4e, 0xdf, 0xa9,
	0x1d, 0xa9, 0xed, 0xb8, 0xb6, 0x9f, 0x86, 0x8d, 0x71, 0xe4, 0x0d, 0x74, 0xea, 0xec, 0x1f, 0xfa,
	0x4e, 0xc5, 0xc4, 0xf6, 0xac, 0xbe, 0x21, 0x12, 0xaf, 0x40, 0x27, 0x4e, 0xc7, 0x54, 0x1e, 0xab,
	0x68, 0x6d, 0xb3, 0xf1, 0xb1, 0x1d, 0xa5, 0x0b, 0x13, 0xfd, 0xd2, 0x07, 0x3f, 0xc5, 0xdb, 0xce,
	0x1b, 0x0b, 0x70, 0xce, 0xda, 0x4e, 0xbc, 0x73, 0xde, 0x59, 0xbc, 0xa2, 0xc3, 0xae, 0x0a, 0xd5,
	0x33, 0x99, 0x1d, 0x47, 0xdb, 0xd7, 0xaa, 0x98, 0xae, 0xe2, 0x73, 0x43, 0xc6, 0x6a, 0x42, 0xf9,
	0xdb, 0x4e, 0xf9, 0x7d, 0x65, 0x46, 0x12, 0xe3, 0xb0, 0x9c, 0xea, 0xfb, 0x16, 0x2c, 0xf2, 0xbe,
	0xd4, 0xd1, 0x5a, 0xcc, 0xee, 0x45, 0xdf, 0xd0, 0x88, 0x2f, 0xe0, 0x72, 0xd6, 0x60, 0x81, 0x05,
	0x05, 0xed, 0xa5, 0x3b, 0x2f, 0x19, 0xd5, 0xcd, 0xd2, 0xf8, 0xcd, 0x3d, 0xc5, 0x3b, 0xb0, 0x6c,
	0x35, 0x14, 0xc3, 0x75, 0x47, 0x0c, 0x6b, 0x73, 0xf9, 0x0e, 0x1d, 0x26, 0x07, 0x61, 0x52, 0x28,
	0xb7, 0x5d, 0x0c, 0x2f, 0xaa, 0x0c, 0xaa, 0xc2, 0xa0, 0xff, 0x0a, 0x93, 0xe2, 0x40, 0x06, 0xf9,
	0xe8, 0x88, 0xd2, 0x83, 0x81, 0x5f, 0x21, 0xbe, 0x4f, 0x80, 0xf6, 0x61, 0x7d, 0x3f, 0x0d, 0xdd,
	0x83, 0xa0, 0x2a, 0x75, 0x1d, 0x64, 0x72, 0x54, 0x2b, 0x75, 0xb1, 0x99, 0xfa, 0xba, 0xb9, 0xf9,
	0x40, 0xee, 0xbd, 0x0a, 0x17, 0x2d, 0x9e, 0x7c, 0xa0, 0x6b, 0x2e, 0xb4, 0xdd, 0xa2, 0xe1, 0xdd,
	0x23, 0x62, 0x33, 0xe5, 0x07, 0xc4, 0xf4, 0x3b, 0x9f, 0x12, 0xff, 0xbd, 0x65, 0x57, 0x85, 0xd2,
	0x71, 0xf1, 0x4c, 0xa5, 0x0e, 0x15, 0x82, 0xe3, 0x38, 0x7d, 0x42, 0xdc, 0x16, 0x7d, 0x86, 0x70,
	0xbd, 0x4c, 0x55, 0xb1, 0xe0, 0xc3, 0x99, 0x85, 0x21, 0xa7, 0xa1, 0x0f, 0x67, 0xe8, 0x34, 0x82,
	0x28, 0x46, 0xc1, 0x8a, 0x28, 0x19, 0xe9, 0x20, 0xac, 0x00, 0x55, 0xbd, 0x08, 0xd3, 0xa9, 0xba,
	0x50, 0x59, 0xf4, 0x19, 0x62, 0xbc, 0xcc, 0x73, 0x7e, 0xbd, 0xc5, 0x90, 0xf7, 0xaa, 0x5d, 0x0d,
	0xa2, 0x79, 0xb0, 0x2e, 0xd6, 0xd5, 0xb6, 0xc7, 0x29, 0x2c, 0xd3, 0x0e, 0xc7, 0xe4, 0x6b, 0x97,
	0xde, 0x67, 0xcd, 0x79, 0x49, 0x5a, 0x15, 0x4f, 0xda, 0x4e, 0xf1, 0x64, 0x05, 0x96, 0xac, 0x82,
	0x90, 0xf7, 0x6d, 0x07, 0x96, 0x9d, 0x52, 0xcf, 0x2a, 0xb4, 0xcd, 0x0a, 0xb5, 0xf7, 0x76, 0x51,
	0x21, 0xce, 0xfb, 0x2c, 0x5c, 0x0f, 0xdb, 0x4b, 0x60, 0xc2, 0x80, 0x87, 0x9f, 0x82, 0x23, 0x28,
	0x43, 0xd6, 0x8b, 0xb2, 0xae, 0xf3, 0xa2, 0xec, 0x75, 0xe8, 0x87, 0x2c, 0x58, 0xcf, 0x29, 0xb8,
	0xd8, 0x33, 0xf2, 0x35, 0x0d, 0x3a, 0xe4, 0x30, 0x1d, 0x1d, 0xcb, 0xdc, 0x4f, 0xd3, 0xb2, 0x7a,
	0x04, 0xe9, 0x22, 0xc5, 0x16, 0x88, 0x28, 0x09, 0xe5, 0x53, 0x74, 0x05, 0x32, 0xdf, 0x0e, 0x43,
	0xaa, 0xc9, 0xab, 0x57, 0x91, 0x0d, 0x2d, 0xe2, 0x16, 0xac, 0xc9, 0xa7, 0x72, 0x34, 0xc5, 0x3d,
	0xa8, 0xc6, 0xe5, 0x97, 0x3d, 0x75, 0x34, 0x65, 0x80, 0x72, 0xf2, 0x80, 0x9e, 0x46, 0x0c, 0xa8,
	0x90, 0x6a, 0x60, 0xf5, 0x96, 0x2f, 0x2c, 0xe8, 0x96, 0xa1, 0xe3, 0xd3, 0x37, 0x72, 0x4e, 0x33,
	0x99, 0x07, 0xf4, 0xe8, 0x56, 0xd5, 0xb6, 0x97, 0x14, 0xe7, 0x1a, 0xda, 0x2c, 0xda, 0x72, 0xb5,
	0x68, 0x5e, 0x00, 0x17, 0xef, 0x3d, 0x95, 0x23, 0x77, 0xd7, 0x9e, 0x5f, 0x9c, 0xb4, 0x0e, 0x70,
	0x6d, 0xf7, 0x00, 0xc7, 0x91, 0xaa, 0x63, 0x22, 0x95, 0xf7, 0xfb, 0x20, 0xec, 0x21, 0x78, 0xd5,
	0xaf, 0xc0, 0x02, 0xce, 0xdc, 0xb0, 0x67, 0xc8, 0x7b, 0x0c, 0xeb, 0x48, 0x7d, 0x80, 0xc1, 0xef,
	0xd9, 0xe5, 0xa9, 0xb8, 0xb5, 0x6d, 0x6e, 0xb4, 0x51, 0xca, 0x30, 0x52, 0xef, 0xbb, 0x96, 0x7d,
	0x05, 0x78, 0xaf, 0xa9, 0x49, 0xf3, 0x18, 0x95, 0x40, 0xbc, 0x7b, 0x94, 0xdd, 0x33, 0xe4, 0x3d,
	0x84, 0x15, 0x24, 0x7e, 0x74, 0x7f, 0x7e, 0xed, 0xef, 0x6c, 0x8d, 0x34, 0xcb, 0xb0, 0x0b, 0xab,
	0x9a, 0xed, 0x7c, 0x01, 0x9c, 0x57, 0xe5, 0x6d, 0xf7, 0x55, 0xb9, 0x27, 0x79, 0x26, 0x74, 0xee,
	0xfb, 0xfe, 0xea, 0x42, 0x11, 0xd4, 0xa1, 0xb2, 0x43, 0x16, 0xc6, 0x90, 0xb7, 0xa1, 0x96, 0x50,
	0x0f, 0xa3, 0x04, 0xf6, 0x6e, 0x52, 0x81, 0xdd, 0x59, 0xa9, 0x66, 0x87, 0x2b, 0xc8, 0x35, 0x3b,
	0xea, 0xf6, 0x02, 0x58, 0xfa, 0x32, 0x88, 0xca, 0x67, 0xf3, 0x9d, 0xd7, 0x61, 0x90, 0xe5, 0xe9,
	0x48, 0x16, 0xc5, 0x9e, 0x7e, 0xc4, 0x57, 0x21, 0x50, 0xea, 0x24, 0xfd, 0x24, 0x48, 0xc6, 0x6c,
	0x75, 0x0c, 0x79, 0xb7, 0x61, 0x59, 0x0d, 0xc1, 0x0a, 0x9e, 0xf3, 0x3c, 0xdf, 0xbb, 0x07, 0x2b,
	0xdb, 0x65, 0x19, 0x8c, 0x8e, 0xee, 0xf3, 0xd3, 0xc8, 0xf3, 0x95, 0x28, 0xa0, 0x1b, 0x06, 0x65,
	0x40, 0xf2, 0x2c, 0xfb, 0xf4, 0xed, 0x7d, 0x0d, 0x57, 0x8c, 0x4b, 0x75, 0xf7, 0x94, 0x5d, 0xd0,
	0xb6, 0xe2, 0x61, 0x73, 0x52, 0xe4, 0x92, 0x9e, 0x11, 0x1b, 0xdf, 0x87, 0xab, 0x33, 0x63, 0xf1,
	0x4c, 0xcf, 0x15, 0xde, 0xbb, 0x6b, 0xf9, 0x7e, 0x67, 0x05, 0x7f, 0x04, 0xcb, 0x86, 0xee, 0x57,
	0x26, 0xb3, 0xb5, 0xfa, 0x86, 0xde, 0xd0, 0x9a, 0xa4, 0xbb, 0xa8, 0x99, 0xd5, 0xe2, 0x53, 0xb1,
	0x4f, 0xb3, 0xbd, 0x0d, 0xeb, 0x69, 0x1c, 0xee, 0x38, 0x17, 0x1a, 0x8a, 0xf5, 0x0c, 0x1e, 0x69,
	0x13, 0xf9, 0x64, 0xa7, 0xe1, 0xf2, 0x63, 0x06, 0xef, 0x5d, 0xb3, 0x94, 0xa0, 0x47, 0x64, 0x61,
	0xde, 0x77, 0x84, 0xb1, 0xd3, 0x82, 0x67, 0x98, 0xa3, 0xcb, 0xd7, 0xce, 0x14, 0xbc, 0x7f, 0x69,
	0x01, 0x6c, 0x4f, 0xcb, 0x23, 0x3e, 0x71, 0x6d, 0xc2, 0x22, 0x9e, 0xe9, 0xad, 0x70, 0x68, 0x60,
	0xf5, 0x1e, 0xb3, 0x28, 0x9e, 0xa4, 0x79, 0x58, 0xbd, 0xc7, 0x54, 0x30, 0xbd, 0x83, 0x9f, 0x96,
	0x47, 0xfa, 0x30, 0x80, 0xdf, 0xb8, 0xd0, 0x72, 0x52, 0x05, 0x7b, 0x05, 0x60, 0x44, 0x2a, 0x28,
	0x98, 0x04, 0x1c, 0x66, 0x54, 0xd4, 0x77, 0x91, 0xea, 0x20, 0x31, 0x8e, 0x8a, 0x32, 0x3f, 0x2d,
	0xd3, 0x63, 0x99, 0xe8, 0xb8, 0xe5, 0x20, 0xbd, 0x80, 0xef, 0x13, 0xf6, 0xa7, 0x71, 0x6c, 0x6d,
	0x5a, 0x55, 0x5a, 0x6c, 0xd9, 0xa5, 0x45, 0x3a, 0x53, 0xeb, 0xfa, 0x04, 0x7e, 0x8a, 0x57, 0x2c,
	0x89, 0xab, 0xa4, 0xbb, 0x52, 0x85, 0x9a, 0x84, 0x77, 0x93, 0x2f, 0x15, 0xd4, 0x10, 0x55, 0x7a,
	0x45, 0x9b, 0xa5, 0x65, 0x6d, 0x96, 0x5f, 0x19, 0x59, 0x8a, 0x23, 0xab, 0xa8, 0x9f, 0xcb, 0x2c,
	0xd5, 0x89, 0x05, 0x7e, 0xbf, 0x08, 0x49, 0x70, 0x80, 0x39, 0x92, 0x3c, 0x02, 0x41, 0x84, 0x33,
	0xd9, 0x63, 0x83, 0x5e, 0x36, 0xa0, 0x77, 0x98, 0xea, 0x0a, 0xcb, 0xa2, 0xaf, 0x00, 0xda, 0xa2,
	0xf9, 0x34, 0x91, 0xec, 0x82, 0x14, 0xe0, 0x6d, 0xc3, 0x12, 0xf1, 0xdd, 0x95, 0xb1, 0x2c, 0xa9,
	0x5a, 0x3b, 0x4d, 0xca, 0x60, 0x2c, 0xb5, 0xc9, 0x69, 0x10, 0x5b, 0x42, 0xa9, 0x1e, 0x1a, 0x70,
	0x41, 0x88, 0x41, 0x6f, 0x1b, 0x2e, 0x39, 0xa2, 0xf1, 0x2c, 0x6e, 0x9b, 0x24, 0xa8, 0xe5, 0x9c,
	0x0b, 0xac, 0xe1, 0x74, 0x62, 0xe4, 0xf9, 0x56, 0xbe, 0x7a, 0x50, 0xa6, 0xd9, 0x73, 0x85, 0x79,
	0xcc, 0x44, 0x31, 0x26, 0xa9, 0x5f, 0xc3, 0x68, 0xd0, 0xbb, 0xea, 0xf8, 0x0f, 0xe4, 0xc9, 0xbb,
	0x63, 0x1d, 0x56, 0xf9, 0x05, 0xb5, 0x4e, 0xf8, 0xfe, 0x08, 0xd6, 0x0c, 0x86, 0xa5, 0x1f, 0x42,
	0xff, 0x84, 0x1f, 0x5e, 0xb3, 0x22, 0x18, 0xac, 0xbd, 0xca, 0x6e, 0xd7, 0x5f, 0x65, 0x7b, 0xf7,
	0xe0, 0x12, 0x9f, 0xbe, 0x6a, 0x77, 0x56, 0xd5, 0x79, 0xad, 0x75, 0xfe, 0x79, 0xcd, 0xbb, 0x0d,
	0xc2, 0x61, 0x33, 0x2f, 0x7a, 0x7d, 0x05, 0x17, 0x99, 0x76, 0x3b, 0x0c, 0xe7, 0x27, 0x01, 0xb6,
	0x18, 0xed, 0x67, 0x10, 0x63, 0xc3, 0x88, 0x41, 0xac, 0x59, 0x85, 0xd5, 0x80, 0xbb, 0x32, 0xfe,
	0xff, 0x1a, 0x90, 0x58, 0xf3, 0x80, 0xbf, 0x84, 0x0d, 0xc6, 0x3e, 0xcc, 0x42, 0x2b, 0x66, 0xbd,
	0x98, 0x31, 0xaf, 0xc2, 0xe5, 0x1a, 0x77, 0x1e, 0x56, 0x3d, 0xa1, 0xb0, 0x2d, 0x72, 0xde, 0x13,
	0x0a, 0xdb, 0xca, 0x9e, 0xe3, 0xb4, 0xf6, 0xa1, 0xca, 0x3d, 0x9c, 0x04, 0xa9, 0x79, 0x5e, 0x55,
	0xf2, 0xd3, 0x76, 0x92, 0x9f, 0x4b, 0x74, 0x5c, 0x6c, 0xcc, 0x7d, 0xf6, 0x71, 0x88, 0x67, 0xc9,
	0x7d, 0x98, 0x90, 0x3b, 0xab, 0x53, 0xed, 0xc3, 0x24, 0x3b, 0xbf, 0xfb, 0x06, 0x08, 0x9b, 0x94,
	0x19, 0xfc, 0x6b, 0x8b, 0xb8, 0xaa, 0x93, 0xfa, 0xfc, 0x59, 0x6d, 0xc2, 0x62, 0x7a, 0x22, 0xf3,
	0x3c, 0x0a, 0xb5, 0xc7, 0x32, 0xb0, 0x78, 0xbf, 0xf6, 0xbb, 0x96, 0x1f, 0x5b, 0x15, 0x1e, 0x9b,
	0xf5, 0x8b, 0x7e, 0x99, 0xa1, 0x34, 0xaa, 0x87, 0xa8, 0x67, 0x93, 0xe5, 0xfc, 0x19, 0x79, 0x3f,
	0xd7, 0xd9, 0x64, 0x59, 0x58, 0x77, 0xea, 0x8b, 0x19, 0xe3, 0x6a, 0x8f, 0xd4, 0x0d, 0xa9, 0x21,
	0xc0, 0x03, 0xe9, 0x7e, 0x94, 0x8c, 0xb5, 0x7f, 0x7a, 0x13, 0x96, 0x15, 0x58, 0x25, 0x4f, 0x47,
	0xa7, 0x99, 0xcc, 0x2d, 0x76, 0x03, 0xdf, 0x46, 0x79, 0x47, 0x76, 0x02, 0xf4, 0x0c, 0x96, 0x75,
	0xfe, 0x0f, 0xfa, 0xce, 0x4a, 0xbc, 0xed, 0x34, 0xa4, 0x66, 0x81, 0xdf, 0xc0, 0xfa, 0x83, 0x07,
	0x5f, 0xf9, 0xb2, 0x88, 0xbe, 0x91, 0x2f, 0xe4, 0xa0, 0xf4, 0x24, 0x0a, 0x39, 0xa4, 0xf6, 0x7c,
	0x05, 0x50, 0xbd, 0x9c, 0x5e, 0x88, 0xf1, 0xcf, 0x98, 0x18, 0xc2, 0x05, 0xb4, 0xc6, 0x56, 0x02,
	0xdd, 0xf9, 0x9f, 0x0d, 0x18, 0xec, 0x4f, 0x1f, 0xc7, 0xd1, 0x68, 0x7b, 0x7f, 0x4f, 0xdc, 0xa5,
	0xdf, 0xe4, 0x50, 0x19, 0xf6, 0x72, 0xfd, 0x91, 0x0d, 0x09, 0xbb, 0x79, 0x65, 0xe6, 0xed, 0x8d,
	0x9a, 0xd8, 0x05, 0xf1, 0x21, 0xfd, 0xa6, 0x49, 0xe5, 0xb4, 0xe2, 0x6a, 0x45, 0xe6, 0x64, 0xd4,
	0x9b, 0xc3, 0xd9, 0x06, 0xc3, 0xe1, 0x6e, 0xf5, 0x8b, 0xa0, 0xcb, 0xb5, 0xc7, 0x55, 0xb3, 0xa3,
	0xdb, 0xd5, 0x08, 0x33, 0xba, 0x8a, 0xb7, 0xf6, 0xe8, 0x4e, 0x72, 0x60, 0x8f, 0x5e, 0xcb, 0x0f,
	0x2f, 0x88, 0x0f, 0xf4, 0xcf, 0x4f, 0xf2, 0x52, 0x5c, 0x71, 0xec, 0xd0, 0xe4, 0xd9, 0x9b, 0x57,
	0x67, 0xf0, 0x35, 0xe1, 0xd1, 0xdf, 0xd9, 0xc2, 0x5b, 0x7e, 0x72, 0xf3, 0x4a, 0x1d, 0x5d, 0x13,
	0x9e, 0xef, 0x01, 0xed, 0x31, 0x6c, 0x33, 0xb5, 0x85, 0xaf, 0x59, 0x95, 0x16, 0x9e, 0x1c, 0x96,
	0x2d, 0xbc, 0xed, 0xea, 0x6c, 0xe1, 0x5d, 0xcf, 0x76, 0x41, 0xec, 0x00, 0x54, 0x0e, 0x4b, 0x58,
	0x03, 0xb9, 0xee, 0x6e, 0xf3, 0x5a, 0x43, 0x8b, 0x61, 0xf2, 0x3e, 0x2c, 0xa8, 0xc3, 0xb1, 0xd0,
	0xe7, 0x23, 0xe7, 0x08, 0xbe, 0x79, 0xb9, 0x86, 0xd5, 0x1d, 0x6f, 0xb5, 0xde, 0x6c, 0x89, 0x4f,
	0xad, 0x5f, 0x01, 0x93, 0xfd, 0xbd, 0xd4, 0xfc, 0x8a, 0x49, 0xb1, 0xba, 0x7e, 0xc6, 0x13, 0x27,
	0x2d, 0xca, 0xa7, 0xf5, 0xdf, 0x14, 0xbf, 0xd4, 0xf8, 0x04, 0xe9, 0x2c, 0x6e, 0xb3, 0xb6, 0x65,
	0x1e, 0xdc, 0x98, 0xe5, 0xa9, 0x3f, 0xf0, 0x31, 0xcb, 0x33, 0xf3, 0x36, 0xc7, 0xbb, 0x20, 0xde,
	0x85, 0x05, 0xf5, 0x50, 0xc8, 0xa8, 0xc6, 0x79, 0x99, 0x64, 0x54, 0xe3, 0x3e, 0x3a, 0xa2, 0x85,
	0x59, 0x3e, 0x90, 0xa5, 0xf1, 0xbb, 0xb6, 0x71, 0x38, 0xce, 0xde, 0x36, 0x8e, 0x9a, 0x8b, 0xb6,
	0x2c, 0xbb, 0x2c, 0x6a, 0x96, 0x6d, 0xbc, 0x76, 0xcd, 0xb2, 0x4b, 0xbb, 0xfb, 0x67, 0xf6, 0xd2,
	0xa4, 0xe3, 0xa2, 0x61, 0x69, 0xaa, 0x7a, 0x6a, 0xc3, 0xd2, 0x58, 0x45, 0x4a, 0xef, 0xc2, 0x9b,
	0x2d, 0xe1, 0x5b, 0xcf, 0x55, 0xd9, 0x5d, 0xfc, 0xa0, 0xde, 0xc9, 0x75, 0x1a, 0x2f, 0x9f, 0xd5,
	0x6c, 0x64, 0xfc, 0x1c, 0x56, 0xdd, 0xd3, 0xad, 0xb8, 0xde, 0xf0, 0x43, 0xc5, 0x6a, 0x23, 0xff,
	0xe0, 0x8c, 0x56, 0xc3, 0xd0, 0x16, 0x52, 0x1d, 0x51, 0x67, 0x85, 0x74, 0x0e, 0xcb, 0xb3, 0x42,
	0xd6, 0x4e, 0xb6, 0x2e, 0x4f, 0xde, 0xec, 0xb3, 0x72, 0x38, 0x5b, 0xfe, 0xe5, 0xb3, 0x9a, 0x1b,
	0x2d, 0x9d, 0x9c, 0xcf, 0x4b, 0xb3, 0x33, 0xab, 0x5c, 0xd0, 0xf5, 0xe6, 0xc6, 0x33, 0x66, 0x4d,
	0xbe, 0xb4, 0x61, 0xd6, 0xb6, 0x47, 0x7d, 0xf9, 0xac, 0x66, 0xdb, 0xb7, 0x54, 0x95, 0x44, 0xe3,
	0x5b, 0x66, 0xea, 0x97, 0xc6, 0xb7, 0xcc, 0x96, 0x1d, 0xbd, 0x0b, 0x62, 0x17, 0x06, 0xa6, 0xf8,
	0x67, 0x36, 0x41, 0xbd, 0xe4, 0xb8, 0x39, 0x9c, 0x6d, 0x70, 0x9c, 0x0c, 0x8b, 0xc2, 0xba, 0x77,
	0xa8, 0x1d, 0xb5, 0x5f, 0x6b, 0x68, 0xb1, 0x1c, 0xfd, 0x82, 0x2a, 0x3a, 0x99, 0xbd, 0xec, 0xd4,
	0xa0, 0x36, 0x1b, 0xb1, 0x2c, 0xc0, 0x5b, 0xd0, 0xa5, 0xdf, 0x3d, 0x08, 0xeb, 0xbf, 0x5d, 0xd0,
	0x83, 0x5e, 0x72, 0x70, 0xb6, 0xf3, 0x31, 0x51, 0xdb, 0xcc, 0xbc, 0x9e, 0x43, 0x98, 0x99, 0xcf,
	0x04, 0x78, 0xef, 0x82, 0xf8, 0x18, 0x96, 0xac, 0x63, 0x93, 0xd0, 0x93, 0x9b, 0x3d, 0x4a, 0x6d,
	0x6e, 0x36, 0x35, 0xd9, 0x0b, 0x59, 0x9d, 0x7b, 0x8c, 0xf6, 0x66, 0x4e, 0x59, 0x9b, 0xd7, 0x1a,
	0x5a, 0x2c, 0x61, 0x56, 0xaa, 0xb3, 0x8c, 0xb4, 0x0c, 0x62, 0xe6, 0xf0, 0x54, 0xe7, 0x63, 0x9f,
	0x7d, 0xc8, 0xee, 0x9d, 0xf3, 0x89, 0xb1, 0xfb, 0xa6, 0x33, 0x91, 0xb1, 0xfb, 0xe6, 0x23, 0xcd,
	0x05, 0xf1, 0x11, 0x7b, 0xf8, 0xfd, 0x69, 0x1c, 0xbb, 0x1e, 0xde, 0x2a, 0xb9, 0xb8, 0x1e, 0xde,
	0x2e, 0x94, 0x90, 0x5b, 0xab, 0x78, 0x14, 0x47, 0x75, 0x1e, 0xa6, 0x54, 0x52, 0xe7, 0x51, 0x95,
	0x38, 0x88, 0xc7, 0xc7, 0x5c, 0x7a, 0xe0, 0xbd, 0x77, 0xcd, 0x26, 0x76, 0xf7, 0xdd, 0x66, 0x53,
	0x93, 0x99, 0xcf, 0x5b, 0xd0, 0xc5, 0xec, 0xd8, 0xd8, 0x99, 0x95, 0x39, 0x1b, 0x3b, 0xb3, 0xd3,
	0x67, 0xd5, 0x85, 0x22, 0xa5, 0xa9, 0x49, 0x58, 0x01, 0xf2, 0x92, 0x83, 0xb3, 0x53, 0x1e, 0xfd,
	0xbb, 0x6b, 0x13, 0xc0, 0x9c, 0x2a, 0x82, 0x49, 0x79, 0x6a, 0xa5, 0x04, 0xef, 0xc2, 0xe3, 0x05,
	0x7a, 0x07, 0xf0, 0xd3, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x78, 0x55, 0xc4, 0x2c, 0x47,
	0x00, 0x00,
}
